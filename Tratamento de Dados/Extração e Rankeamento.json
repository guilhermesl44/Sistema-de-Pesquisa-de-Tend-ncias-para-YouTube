{
  "name": "Extração e Rankeamento",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0f4d9260-b53e-4a4e-a7b1-905673b93687",
              "name": "Nicho",
              "value": "={{ $json.nicho }}",
              "type": "string"
            },
            {
              "id": "e19542a7-d0da-4817-ac59-15710dbae275",
              "name": "Resultado maximo",
              "value": "={{ $json.quantidade_esperada }}",
              "type": "string"
            },
            {
              "id": "eb80ae44-79f3-441c-aa97-7e574f1af004",
              "name": "Ordem de classificação",
              "value": "={{ $json.sorting_order }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -176,
        -384
      ],
      "id": "1b0f9d6e-f3f9-4089-8483-de22e3e1e39a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/streamers~youtube-scraper/runs?token=YOUR_API_TOKEN_HERE",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"downloadSubtitles\": false,\n    \"hasCC\": false,\n    \"hasLocation\": false,\n    \"hasSubtitles\": false,\n    \"is360\": false,\n    \"is3D\": false,\n    \"is4K\": false,\n    \"isBought\": false,\n    \"isHD\": false,\n    \"isHDR\": false,\n    \"isLive\": false,\n    \"isVR180\": false,\n    \"maxResultStreams\": 0,\n    \"maxResults\": {{ $json['Resultado maximo'] }},\n    \"maxResultsShorts\": 0,\n    \"preferAutoGeneratedSubtitles\": false,\n    \"saveSubsToKVS\": false,\n    \"searchQueries\": [\"{{ $json.Nicho }}\"],\n    \"sortingOrder\": \"{{ $json[\"Ordem de classificação\"] }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        48,
        -384
      ],
      "id": "d03e8616-f6d3-4848-a7d8-d0f6c76d0949",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/streamers~youtube-scraper/runs/last/dataset/items?token=YOUR_API_TOKEN_HERE",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        768,
        -384
      ],
      "id": "470864ab-b364-4ec7-b860-5e6b5da1e676",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "amount": 10,
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        496,
        -384
      ],
      "id": "f8eb4b01-4a7e-47c3-beab-53196c95383c",
      "name": "Wait",
      "webhookId": "b1e202c9-f5c4-412b-82c3-a0537bc22034"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "DADOSBRUTOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "estatisticas",
              "displayName": "estatisticas",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "videos",
              "displayName": "videos",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1440,
        -384
      ],
      "id": "778716eb-9db1-434f-b09b-949c93283add",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =============================================\n// CODE NODE 1 - CÁLCULO DE MÉTRICAS (sem descrição, sem transcrição)\n// Saída: { estatisticas, videos[] }\n// =============================================\n\nconst items = $input.all();\n\n// Contexto (opcional) do \"Edit Fields\"\nlet contextoBusca = { nicho: \"\", resultadoMaximo: \"\", ordemClassificacao: \"\" };\ntry {\n  const edit = $('Edit Fields').item.json;\n  contextoBusca = {\n    nicho: edit.Nicho || edit.nicho || \"\",\n    resultadoMaximo: edit['Resultado maximo'] || edit.resultadoMaximo || \"\",\n    ordemClassificacao: edit['Ordem de classificação'] || edit.ordemClassificacao || \"\"\n  };\n} catch { /* ok sem Edit Fields */ }\n\n// ---------- Helpers ----------\nconst toInt = (x) => Number(String(x ?? 0).replace(/[^\\d]/g, '')) || 0;\n\nfunction daysSincePublished(dateString) {\n  const d = new Date(dateString || Date.now());\n  const diff = Math.abs(Date.now() - d.getTime());\n  return Math.max(1, Math.ceil(diff / (1000 * 60 * 60 * 24)));\n}\n\nfunction durationToSeconds(hhmmss) {\n  if (!hhmmss) return 0;\n  const parts = String(hhmmss).split(':').map(n => parseInt(n, 10));\n  if (parts.length === 3) return parts[0]*3600 + parts[1]*60 + parts[2];\n  if (parts.length === 2) return parts[0]*60 + parts[1];\n  return toInt(parts[0]);\n}\n\n// ---------- Processamento ----------\nconst processed = items.map((it, idx) => {\n  const d = it.json || it;\n\n  const title = (d.title || d['Titulo '] || d.Titulo || '').trim();\n  const id = d.id || d.ID || `video_${idx}`;\n  const url = d.url || d.Link || '';\n  const thumb = d.thumbnailUrl || d.Thumb || '';\n  const views = toInt(d.viewCount || d.View);\n  const likes = toInt(d.likes || d.Likes);\n  const comments = toInt(d.commentsCount || d['Comentarios '] || d.Comentarios);\n  const subsCount = toInt(d.numberOfSubscribers || d.Inscritos || 1);\n  const publishDate = d.date || d.Data || new Date().toISOString();\n  const duration = d.duration || d['Duração'] || d.Duracao || '00:00:00';\n  const channelName = (d.channelName || d.channelUsername || d.Canal || '').trim();\n  const channelUrl = d.channelUrl || d.CanalLink || '';\n  const channelId = d.channelId || d.IDCanal || '';\n\n  // temporais\n  const diasPublicado = daysSincePublished(publishDate);\n  const duracaoSegundos = durationToSeconds(duration);\n\n  // métricas\n  const engagementRate = views > 0 ? +((likes / views) * 100).toFixed(2) : 0;\n  const likeRate = views > 0 ? +((likes / views) * 1000).toFixed(2) : 0;\n  const commentRate = views > 0 ? +((comments / views) * 1000).toFixed(2) : 0;\n  const totalEngagement = likes + comments;\n  const totalEngagementRate = views > 0 ? +((totalEngagement / views) * 100).toFixed(2) : 0;\n  const viewsPerDay = Math.round(views / Math.max(1, diasPublicado));\n  const outlierScore = subsCount > 0 ? +((views / subsCount) * 100).toFixed(2) : 0;\n\n  // formato\n  let formatoVideo = 'médio';\n  if (duracaoSegundos < 180) formatoVideo = 'short';\n  else if (duracaoSegundos < 600) formatoVideo = 'curto';\n  else if (duracaoSegundos < 1200) formatoVideo = 'médio';\n  else formatoVideo = 'longo';\n\n  return {\n    // contexto\n    nicho: contextoBusca.nicho,\n    resultadoMaximo: contextoBusca.resultadoMaximo,\n    ordemClassificacao: contextoBusca.ordemClassificacao,\n\n    // identificação\n    id,\n    titulo: title,\n    link: url,\n    thumb,\n\n    // dados brutos\n    view: views,                 // <- usar sempre 'view' (singular)\n    likes,\n    comentarios: comments,\n    duracao: duration,\n    data: publishDate,\n\n    // canal\n    idCanal: channelId,\n    canal: channelName,\n    canalLink: channelUrl,\n    inscritos: subsCount,\n\n    // calculadas\n    diasPublicado,\n    duracaoSegundos,\n    formatoVideo,\n    engagementRate,\n    likeRate,\n    commentRate,\n    totalEngagement,\n    totalEngagementRate,\n    viewsPerDay,\n    outlierScore\n  };\n});\n\n// ---------- Ordenação & estatísticas (usa 'view') ----------\nprocessed.sort((a, b) => b.view - a.view);\n\nconst totalVideos = processed.length;\nconst totalViews = processed.reduce((s, v) => s + (v.view || 0), 0);\nconst totalLikes = processed.reduce((s, v) => s + (v.likes || 0), 0);\nconst avgViews = Math.round(totalViews / Math.max(1, totalVideos));\nconst avgEngagement = +(\n  processed.reduce((s, v) => s + (v.engagementRate || 0), 0) / Math.max(1, totalVideos)\n).toFixed(2);\nconst avgOutlier = +(\n  processed.reduce((s, v) => s + (v.outlierScore || 0), 0) / Math.max(1, totalVideos)\n).toFixed(2);\nconst avgViewsPerDay = Math.round(\n  processed.reduce((s, v) => s + (v.viewsPerDay || 0), 0) / Math.max(1, totalVideos)\n);\n\n// ---------- Saída ----------\nreturn [{\n  json: {\n    estatisticas: {\n      totalVideos,\n      totalViews,\n      totalLikes,\n      mediaViews: avgViews,\n      mediaEngagement: avgEngagement,\n      mediaOutlier: avgOutlier,\n      mediaViewsPerDay: avgViewsPerDay,\n      dataProcessamento: new Date().toISOString(),\n      contextoBusca\n    },\n    videos: processed\n  }\n}];\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        -384
      ],
      "id": "27bc101d-6604-4481-995f-58ecaad227ad",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "fieldToSplitOut": "videos",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1216,
        -384
      ],
      "id": "339d797e-046f-4851-baf1-9aa618a80642",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "// Mapeamento dos valores em português para inglês\nconst filterMap = {\n  'Sem Filtro': null,\n  'Relevância': 'relevance',\n  'Data do Upload': 'date',\n  'Contagem de visualizações': 'views',\n  'Rating': 'rating'\n};\n\n// Pega o valor do formulário (vem como array)\nconst filtroArray = $input.item.json['Filtro por '];\n\n// Pega o primeiro item do array (se existir)\nconst filtroSelecionado = filtroArray && filtroArray.length > 0 ? filtroArray[0] : null;\n\n// Converte para o valor em inglês\nconst filtroTraduzido = filtroSelecionado ? filterMap[filtroSelecionado] : null;\n\n// Retorna o valor traduzido junto com os outros campos\nreturn {\n  json: {\n    nicho: $input.item.json.Nicho,\n    quantidade_esperada: $input.item.json['Quantidade esperada'],\n    sorting_order: filtroTraduzido,\n    submitted_at: $input.item.json.submittedAt,\n    form_mode: $input.item.json.formMode\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        -384
      ],
      "id": "2127e028-32fc-4f24-a9bf-72b590cb90ea",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "DADOSBRUTOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        -656,
        -80
      ],
      "id": "14947bfd-cb39-424d-ac20-9a183298532c",
      "name": "Google Sheets Trigger",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "6Z6MEbvijNLMdskV",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =============================================\n// CODE NODE - BENCHMARKS DINÂMICOS POR NICHO\n// Otimizado para processar GRANDE VOLUME de dados\n// Calcula benchmarks específicos para cada nicho\n// =============================================\n\nconst INICIO = Date.now();\n\n// Pegar TODOS os itens da planilha\nconst todosVideos = $input.all();\nconst totalLinhas = todosVideos.length;\n\nconsole.log(`🚀 Iniciando processamento de ${totalLinhas} linhas...`);\n\n// =============================================\n// FUNÇÕES ESTATÍSTICAS OTIMIZADAS\n// =============================================\n\nfunction calcularEstatisticas(valores) {\n  if (!valores || valores.length === 0) {\n    return {\n      media: 0, mediana: 0, desvioPadrao: 0, min: 0, max: 0,\n      p10: 0, p25: 0, p50: 0, p75: 0, p90: 0, p95: 0, p99: 0\n    };\n  }\n  \n  // Ordenar uma única vez\n  const sorted = valores.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  \n  // Média\n  const soma = sorted.reduce((acc, val) => acc + val, 0);\n  const media = soma / len;\n  \n  // Desvio padrão\n  const variancia = sorted.reduce((acc, val) => acc + Math.pow(val - media, 2), 0) / len;\n  const desvioPadrao = Math.sqrt(variancia);\n  \n  // Percentis\n  const getPercentil = (p) => sorted[Math.floor(len * p)] || 0;\n  \n  return {\n    media: parseFloat(media.toFixed(2)),\n    mediana: getPercentil(0.50),\n    desvioPadrao: parseFloat(desvioPadrao.toFixed(2)),\n    min: sorted[0],\n    max: sorted[len - 1],\n    p10: getPercentil(0.10),\n    p25: getPercentil(0.25),\n    p50: getPercentil(0.50),\n    p75: getPercentil(0.75),\n    p90: getPercentil(0.90),\n    p95: getPercentil(0.95),\n    p99: getPercentil(0.99),\n    totalAmostras: len\n  };\n}\n\n// =============================================\n// EXTRAÇÃO E NORMALIZAÇÃO DOS DADOS\n// =============================================\n\nconst videosPorNicho = new Map();\n\ntodosVideos.forEach((item, index) => {\n  const data = item.json;\n  \n  // Extrair nicho (suporta vários formatos) - INCLUINDO \"Termo de Pesquisa\"\n  const nicho = (\n    data[\"Termo de Pesquisa\"] ||\n    data.termo_de_pesquisa ||\n    data.nicho || \n    data.Nicho || \n    data.NICHO ||\n    data.keyword ||\n    data.Keyword ||\n    data.query ||\n    data.searchTerm ||\n    \"sem_nicho\"\n  ).toString().toLowerCase().trim();\n  \n  // Extrair métricas (suporta múltiplos formatos - INCLUINDO OS SEUS CAMPOS)\n  const video = {\n    // Identificação\n    id: data.ID || data.id || data.IDCanal || `video_${index}`,\n    titulo: data[\"Titulo \"] || data.Titulo || data.titulo || data.title || data.Title || \"\",\n    link: data.Link || data.link || data.url || \"\",\n    thumb: data.Thumb || data.thumb || data.thumbnail || \"\",\n    canal: data.Canal || data.canal || data.channelName || \"\",\n    canalLink: data.CanalLink || data.canalLink || data.channelUrl || \"\",\n    idCanal: data.IDCanal || data.idCanal || data.channelId || \"\",\n    \n    // Contexto da busca\n    termoPesquisa: data[\"Termo de Pesquisa\"] || data.termo_de_pesquisa || \"\",\n    filtro: data.Filtro || data.filtro || \"\",\n    formatoVideo: data.FormatoVideo || data.formatoVideo || \"\",\n    data: data.Data || data.data || \"\",\n    \n    // Métricas brutas (converter para número) - SEUS CAMPOS EXATOS\n    view: parseFloat(data.View || data.view || data.views || data.viewCount || 0),\n    likes: parseFloat(data.Likes || data.likes || 0),\n    comentarios: parseFloat(data[\"Comentarios \"] || data.Comentarios || data.comentarios || data.comments || data.commentsCount || 0),\n    inscritos: parseFloat(data.Inscritos || data.inscritos || data.subscribers || data.numberOfSubscribers || 1),\n    diasPublicado: parseFloat(data.Diaspublicados || data.diasPublicado || data[\"Dias Publicado\"] || data.daysOld || 1),\n    duracaoSegundos: parseFloat(data.DuracaoSecundos || data.duracaoSegundos || data[\"Duracao Segundos\"] || data.duration || 0),\n    \n    // Métricas calculadas - SEUS CAMPOS EXATOS\n    engagementRate: parseFloat(data.EngajamentoRate || data.engagementRate || data[\"Engagement Rate\"] || 0),\n    likeRate: parseFloat(data.LikeRate || data.likeRate || data[\"Like Rate\"] || 0),\n    commentRate: parseFloat(data.CommetRate || data.commentRate || data[\"Comment Rate\"] || 0),\n    totalEngagement: parseFloat(data.totalEngagement || data[\"Total Engagement\"] || 0),\n    totalEngagementRate: parseFloat(data.totalEngagementRate || data[\"Total Engagement Rate\"] || 0),\n    viewsPerDay: parseFloat(data.viewsPerDay || data[\"Views Per Day\"] || 0),\n    outlierScore: parseFloat(data.outlierScore || data[\"Outlier Score\"] || 0)\n  };\n  \n  // Recalcular métricas se necessário (caso não venham calculadas)\n  if (video.engagementRate === 0 && video.view > 0) {\n    video.engagementRate = parseFloat(((video.likes / video.view) * 100).toFixed(2));\n  }\n  if (video.viewsPerDay === 0 && video.diasPublicado > 0) {\n    video.viewsPerDay = Math.round(video.view / video.diasPublicado);\n  }\n  if (video.outlierScore === 0 && video.inscritos > 0) {\n    video.outlierScore = parseFloat(((video.view / video.inscritos) * 100).toFixed(2));\n  }\n  if (video.likeRate === 0 && video.view > 0) {\n    video.likeRate = parseFloat(((video.likes / video.view) * 1000).toFixed(2));\n  }\n  if (video.commentRate === 0 && video.view > 0) {\n    video.commentRate = parseFloat(((video.comentarios / video.view) * 1000).toFixed(2));\n  }\n  \n  // Agrupar por nicho\n  if (!videosPorNicho.has(nicho)) {\n    videosPorNicho.set(nicho, []);\n  }\n  videosPorNicho.get(nicho).push(video);\n});\n\nconsole.log(`📊 Agrupado em ${videosPorNicho.size} nichos diferentes`);\n\n// =============================================\n// CALCULAR BENCHMARKS POR NICHO\n// =============================================\n\nconst benchmarksPorNicho = {};\n\nfor (const [nicho, videos] of videosPorNicho) {\n  console.log(`📈 Processando nicho: \"${nicho}\" (${videos.length} vídeos)`);\n  \n  // Extrair arrays de cada métrica\n  const metricas = {\n    view: videos.map(v => v.view),\n    likes: videos.map(v => v.likes),\n    comentarios: videos.map(v => v.comentarios),\n    inscritos: videos.map(v => v.inscritos),\n    diasPublicado: videos.map(v => v.diasPublicado),\n    duracaoSegundos: videos.map(v => v.duracaoSegundos),\n    engagementRate: videos.map(v => v.engagementRate),\n    likeRate: videos.map(v => v.likeRate),\n    commentRate: videos.map(v => v.commentRate),\n    totalEngagementRate: videos.map(v => v.totalEngagementRate),\n    viewsPerDay: videos.map(v => v.viewsPerDay),\n    outlierScore: videos.map(v => v.outlierScore)\n  };\n  \n  // Calcular estatísticas para cada métrica\n  const benchmarks = {};\n  for (const [metrica, valores] of Object.entries(metricas)) {\n    benchmarks[metrica] = calcularEstatisticas(valores);\n  }\n  \n  // Salvar benchmarks do nicho (SEM niveisPerformance e insights)\n  benchmarksPorNicho[nicho] = {\n    nicho: nicho,\n    totalVideos: videos.length,\n    benchmarks: benchmarks\n  };\n}\n\n// =============================================\n// PEGAR BENCHMARK DO NICHO\n// =============================================\n\nconst benchmarkDoNicho = Object.values(benchmarksPorNicho)[0];\n\n// =============================================\n// PERFORMANCE E LOG FINAL\n// =============================================\n\nconst TEMPO_TOTAL = ((Date.now() - INICIO) / 1000).toFixed(2);\nconst VIDEOS_POR_SEGUNDO = (totalLinhas / (TEMPO_TOTAL)).toFixed(0);\n\nconsole.log('\\n✅ PROCESSAMENTO CONCLUÍDO!');\nconsole.log(`⏱️  Tempo total: ${TEMPO_TOTAL}s`);\nconsole.log(`⚡ Performance: ${VIDEOS_POR_SEGUNDO} vídeos/segundo`);\nconsole.log(`📊 Total de vídeos: ${totalLinhas}`);\nconsole.log(`🎯 Nicho processado: ${benchmarkDoNicho.nicho}`);\n\nconsole.log(`\\n📈 BENCHMARKS DO NICHO \"${benchmarkDoNicho.nicho.toUpperCase()}\"`);\nconsole.log(`   Total de vídeos: ${benchmarkDoNicho.totalVideos}`);\nconsole.log(`   Mediana de views: ${benchmarkDoNicho.benchmarks.view.mediana.toLocaleString()}`);\nconsole.log(`   Top 10% views: ${benchmarkDoNicho.benchmarks.view.p90.toLocaleString()}`);\nconsole.log(`   Engagement médio: ${benchmarkDoNicho.benchmarks.engagementRate.mediana}%`);\n\n// =============================================\n// TRANSFORMAR BENCHMARKS EM ARRAYS\n// =============================================\n\nconst ordemEstatisticas = [\n  'media', 'mediana', 'desvioPadrao', 'min', 'max',\n  'p10', 'p25', 'p50', 'p75', 'p90', 'p95', 'p99', 'totalAmostras'\n];\n\nconst benchmarksArray = {\n  BenchMarks: ordemEstatisticas\n};\n\n// Para cada métrica, criar um array com todas as estatísticas na ordem\nObject.keys(benchmarkDoNicho.benchmarks).forEach(metrica => {\n  const stats = benchmarkDoNicho.benchmarks[metrica];\n  \n  benchmarksArray[metrica] = [\n    stats.media,\n    stats.mediana,\n    stats.desvioPadrao,\n    stats.min,\n    stats.max,\n    stats.p10,\n    stats.p25,\n    stats.p50,\n    stats.p75,\n    stats.p90,\n    stats.p95,\n    stats.p99,\n    stats.totalAmostras\n  ];\n});\n\n// =============================================\n// OUTPUT FINAL\n// =============================================\n\nreturn [{\n  json: {\n    metadata: {\n      dataProcessamento: new Date().toISOString(),\n      tempoProcessamento: `${TEMPO_TOTAL}s`,\n      performance: `${VIDEOS_POR_SEGUNDO} vídeos/s`,\n      totalVideosProcessados: totalLinhas,\n      nicho: benchmarkDoNicho.nicho\n    },\n    \n    benchmarks: benchmarksArray,\n    nichoProcessado: benchmarkDoNicho.nicho\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        -80
      ],
      "id": "8ebe6c9e-ab29-4448-9d0a-bde25d9cb0db",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a261f1e0-4f68-4f96-afd7-8723e82957f0",
              "name": "benchmarks.BenchMarks",
              "value": "={{ $json.benchmarks.BenchMarks }}",
              "type": "array"
            },
            {
              "id": "018ab2cc-6b0e-4d5e-a6b5-29217c4bc6d5",
              "name": "benchmarks.view",
              "value": "={{ $json.benchmarks.view }}",
              "type": "array"
            },
            {
              "id": "161fef81-b68a-4e5a-a939-fe0e321b0ec0",
              "name": "benchmarks.likes",
              "value": "={{ $json.benchmarks.likes }}",
              "type": "array"
            },
            {
              "id": "72f0be08-1a37-4597-a94c-597bd0376451",
              "name": "benchmarks.comentarios",
              "value": "={{ $json.benchmarks.comentarios }}",
              "type": "array"
            },
            {
              "id": "b210918e-a531-4070-906b-6f20ce78ac05",
              "name": "benchmarks.inscritos",
              "value": "={{ $json.benchmarks.inscritos }}",
              "type": "array"
            },
            {
              "id": "3398333c-c697-418e-9f32-0725e64a05c7",
              "name": "benchmarks.diasPublicado",
              "value": "={{ $json.benchmarks.diasPublicado }}",
              "type": "array"
            },
            {
              "id": "b8d9d039-9974-4785-88b2-a2a9d55ac865",
              "name": "benchmarks.duracaoSegundos",
              "value": "={{ $json.benchmarks.duracaoSegundos }}",
              "type": "array"
            },
            {
              "id": "be4c66a3-cfe0-4bed-8f18-c6a1d5d95925",
              "name": "benchmarks.engagementRate",
              "value": "={{ $json.benchmarks.engagementRate }}",
              "type": "array"
            },
            {
              "id": "e79a5b7a-f78d-447d-8fc8-793886259915",
              "name": "benchmarks.likeRate",
              "value": "={{ $json.benchmarks.likeRate }}",
              "type": "array"
            },
            {
              "id": "59027fc3-76e2-4249-979d-9d3a349be791",
              "name": "benchmarks.commentRate",
              "value": "={{ $json.benchmarks.commentRate }}",
              "type": "array"
            },
            {
              "id": "d61f196d-07e2-4bd3-b9a0-f0d0ca4d5f57",
              "name": "benchmarks.totalEngagementRate",
              "value": "={{ $json.benchmarks.totalEngagementRate }}",
              "type": "array"
            },
            {
              "id": "2047f7c8-638a-44ff-996a-34f575216695",
              "name": "benchmarks.viewsPerDay",
              "value": "={{ $json.benchmarks.viewsPerDay }}",
              "type": "array"
            },
            {
              "id": "60f93976-ed56-4328-938e-8eed0101569e",
              "name": "benchmarks.outlierScore",
              "value": "={{ $json.benchmarks.outlierScore }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        -80
      ],
      "id": "aedf044a-0f2e-4cb4-84b6-675580f37ddc",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "benchmarks.BenchMarks, benchmarks.view, benchmarks.likes, benchmarks.comentarios, benchmarks.inscritos, benchmarks.diasPublicado, benchmarks.duracaoSegundos, benchmarks.engagementRate, benchmarks.likeRate, benchmarks.commentRate, benchmarks.totalEngagementRate, benchmarks.viewsPerDay, benchmarks.outlierScore",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        16,
        -80
      ],
      "id": "df7c607a-2f4d-41f7-8cb4-cf64b0adc097",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 156227565,
          "mode": "list",
          "cachedResultName": "BenchMark",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=156227565"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "view": "={{ $json['benchmarks.view'] }}",
            "likes": "={{ $json['benchmarks.likes'] }}",
            "BenchMarks": "={{ $json['benchmarks.BenchMarks'] }}",
            "comentarios": "={{ $json['benchmarks.comentarios'] }}",
            "inscritos": "={{ $json['benchmarks.inscritos'] }}",
            "diasPublicado": "={{ $json['benchmarks.diasPublicado'] }}",
            "duracaoSegundos": "={{ $json['benchmarks.duracaoSegundos'] }}",
            "engagementRate": "={{ $json['benchmarks.engagementRate'] }}",
            "likeRate": "={{ $json['benchmarks.likeRate'] }}",
            "commentRate": "={{ $json['benchmarks.commentRate'] }}",
            "totalEngagementRate": "={{ $json['benchmarks.totalEngagementRate'] }}",
            "viewsPerDay": "={{ $json['benchmarks.viewsPerDay'] }}",
            "outlierScore": "={{ $json['benchmarks.outlierScore'] }}"
          },
          "matchingColumns": [
            "view"
          ],
          "schema": [
            {
              "id": "BenchMarks",
              "displayName": "BenchMarks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "view",
              "displayName": "view",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "likes",
              "displayName": "likes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "comentarios",
              "displayName": "comentarios",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "inscritos",
              "displayName": "inscritos",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "diasPublicado",
              "displayName": "diasPublicado",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "duracaoSegundos",
              "displayName": "duracaoSegundos",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "engagementRate",
              "displayName": "engagementRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "likeRate",
              "displayName": "likeRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "commentRate",
              "displayName": "commentRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "totalEngagementRate",
              "displayName": "totalEngagementRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "viewsPerDay",
              "displayName": "viewsPerDay",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "outlierScore",
              "displayName": "outlierScore",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        464,
        -80
      ],
      "id": "81de857a-4b9e-44eb-923f-9295f8d5f316",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 156227565,
          "mode": "list",
          "cachedResultName": "BenchMark",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=156227565"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        -656,
        224
      ],
      "id": "9e2d75ad-c800-4e54-aae9-2b974d8fa6e8",
      "name": "Google Sheets Trigger1",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "6Z6MEbvijNLMdskV",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =============================================\n// CODE NODE - ANÁLISE DE PERFORMANCE E INSIGHTS\n// Recebe o output do nó de benchmarks e gera análises\n// =============================================\n\ntry {\n  // Pegar os itens do nó anterior (13 itens com as estatísticas)\n  const items = $input.all();\n  \n  console.log(`🔍 Recebido ${items.length} itens de estatísticas...`);\n  \n  if (!items || items.length === 0) {\n    throw new Error('Nenhum item recebido!');\n  }\n  \n  // =============================================\n  // REORGANIZAR DADOS EM FORMATO DE BENCHMARKS\n  // =============================================\n  \n  const metricas = ['view', 'likes', 'comentarios', 'inscritos', 'diasPublicado', \n                    'duracaoSegundos', 'engagementRate', 'likeRate', 'commentRate', \n                    'totalEngagementRate', 'viewsPerDay', 'outlierScore'];\n  \n  const benchmarks = {};\n  \n  // Inicializar todas as métricas\n  metricas.forEach(metrica => {\n    benchmarks[metrica] = {\n      media: 0,\n      mediana: 0,\n      desvioPadrao: 0,\n      min: 0,\n      max: 0,\n      p10: 0,\n      p25: 0,\n      p50: 0,\n      p75: 0,\n      p90: 0,\n      p95: 0,\n      p99: 0,\n      totalAmostras: 0\n    };\n  });\n  \n  console.log('✅ Benchmarks inicializado');\n  \n  // Preencher com dados dos items\n  items.forEach((item, index) => {\n    const data = item.json;\n    const estatistica = data.BenchMarks;\n    \n    if (!estatistica) {\n      console.log(`⚠️ Item ${index} sem BenchMarks`);\n      return;\n    }\n    \n    metricas.forEach(metrica => {\n      const valor = data[metrica];\n      const valorNumerico = (valor === \"\" || valor === null || valor === undefined) \n        ? 0 \n        : parseFloat(valor);\n      \n      // Usar a chave correta baseada no nome da estatística\n      if (benchmarks[metrica]) {\n        benchmarks[metrica][estatistica] = isNaN(valorNumerico) ? 0 : valorNumerico;\n      }\n    });\n  });\n  \n  console.log('✅ Dados preenchidos');\n  \n  // =============================================\n  // RECONSTRUIR MÉTRICAS PARA INSIGHTS\n  // =============================================\n  \n  const totalAmostras = benchmarks.view.totalAmostras || 0;\n  \n  const metricas_totais = {\n    view: (benchmarks.view.media || 0) * totalAmostras,\n    likes: (benchmarks.likes.media || 0) * totalAmostras,\n    comentarios: (benchmarks.comentarios.media || 0) * totalAmostras\n  };\n  \n  // =============================================\n  // NÍVEIS DE PERFORMANCE\n  // =============================================\n  \n  const niveisPerformance = {\n    \"excepcional - Top 1%\": {\n      view: benchmarks.view.p99 || 0,\n      engagementRate: benchmarks.engagementRate.p99 || 0,\n      likeRate: benchmarks.likeRate.p99 || 0,\n      commentRate: benchmarks.commentRate.p99 || 0,\n      totalEngagementRate: benchmarks.totalEngagementRate.p99 || 0,\n      viewsPerDay: benchmarks.viewsPerDay.p99 || 0,\n      outlierScore: benchmarks.outlierScore.p99 || 0\n    },\n    \"excelente - Top 5%\": {\n      view: benchmarks.view.p95 || 0,\n      engagementRate: benchmarks.engagementRate.p95 || 0,\n      likeRate: benchmarks.likeRate.p95 || 0,\n      commentRate: benchmarks.commentRate.p95 || 0,\n      totalEngagementRate: benchmarks.totalEngagementRate.p95 || 0,\n      viewsPerDay: benchmarks.viewsPerDay.p95 || 0,\n      outlierScore: benchmarks.outlierScore.p95 || 0\n    },\n    \"muitoBom - Top 10%\": {\n      view: benchmarks.view.p90 || 0,\n      engagementRate: benchmarks.engagementRate.p90 || 0,\n      likeRate: benchmarks.likeRate.p90 || 0,\n      commentRate: benchmarks.commentRate.p90 || 0,\n      totalEngagementRate: benchmarks.totalEngagementRate.p90 || 0,\n      viewsPerDay: benchmarks.viewsPerDay.p90 || 0,\n      outlierScore: benchmarks.outlierScore.p90 || 0\n    },\n    \"bom - Top 25%\": {\n      view: benchmarks.view.p75 || 0,\n      engagementRate: benchmarks.engagementRate.p75 || 0,\n      likeRate: benchmarks.likeRate.p75 || 0,\n      commentRate: benchmarks.commentRate.p75 || 0,\n      totalEngagementRate: benchmarks.totalEngagementRate.p75 || 0,\n      viewsPerDay: benchmarks.viewsPerDay.p75 || 0,\n      outlierScore: benchmarks.outlierScore.p75 || 0\n    },\n    \"medio - 50% (Mediana)\": {\n      view: benchmarks.view.p50 || 0,\n      engagementRate: benchmarks.engagementRate.p50 || 0,\n      likeRate: benchmarks.likeRate.p50 || 0,\n      commentRate: benchmarks.commentRate.p50 || 0,\n      totalEngagementRate: benchmarks.totalEngagementRate.p50 || 0,\n      viewsPerDay: benchmarks.viewsPerDay.p50 || 0,\n      outlierScore: benchmarks.outlierScore.p50 || 0\n    },\n    \"abaixoMedia - Bottom 25%\": {\n      view: benchmarks.view.p25 || 0,\n      engagementRate: benchmarks.engagementRate.p25 || 0,\n      likeRate: benchmarks.likeRate.p25 || 0,\n      commentRate: benchmarks.commentRate.p25 || 0,\n      totalEngagementRate: benchmarks.totalEngagementRate.p25 || 0,\n      viewsPerDay: benchmarks.viewsPerDay.p25 || 0,\n      outlierScore: benchmarks.outlierScore.p25 || 0\n    }\n  };\n  \n  // =============================================\n  // TRANSFORMAR NÍVEIS DE PERFORMANCE EM ARRAYS\n  // =============================================\n  \n  const niveisArray = {\n    Nivel: [\n      \"Excepcional - Top 1%\",\n      \"Excelente - Top 5%\",\n      \"Muito Bom - Top 10%\",\n      \"Bom - Top 25%\",\n      \"Médio - 50% (Mediana)\",\n      \"Abaixo da Média - 25% Inferiores\"\n    ],\n    view: [\n      niveisPerformance[\"excepcional - Top 1%\"].view.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].view.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].view.toString(),\n      niveisPerformance[\"bom - Top 25%\"].view.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].view.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].view.toString()\n    ],\n    engagementRate: [\n      niveisPerformance[\"excepcional - Top 1%\"].engagementRate.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].engagementRate.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].engagementRate.toString(),\n      niveisPerformance[\"bom - Top 25%\"].engagementRate.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].engagementRate.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].engagementRate.toString()\n    ],\n    likeRate: [\n      niveisPerformance[\"excepcional - Top 1%\"].likeRate.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].likeRate.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].likeRate.toString(),\n      niveisPerformance[\"bom - Top 25%\"].likeRate.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].likeRate.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].likeRate.toString()\n    ],\n    commentRate: [\n      niveisPerformance[\"excepcional - Top 1%\"].commentRate.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].commentRate.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].commentRate.toString(),\n      niveisPerformance[\"bom - Top 25%\"].commentRate.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].commentRate.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].commentRate.toString()\n    ],\n    totalEngagementRate: [\n      niveisPerformance[\"excepcional - Top 1%\"].totalEngagementRate.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].totalEngagementRate.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].totalEngagementRate.toString(),\n      niveisPerformance[\"bom - Top 25%\"].totalEngagementRate.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].totalEngagementRate.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].totalEngagementRate.toString()\n    ],\n    viewsPerDay: [\n      niveisPerformance[\"excepcional - Top 1%\"].viewsPerDay.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].viewsPerDay.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].viewsPerDay.toString(),\n      niveisPerformance[\"bom - Top 25%\"].viewsPerDay.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].viewsPerDay.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].viewsPerDay.toString()\n    ],\n    outlierScore: [\n      niveisPerformance[\"excepcional - Top 1%\"].outlierScore.toString(),\n      niveisPerformance[\"excelente - Top 5%\"].outlierScore.toString(),\n      niveisPerformance[\"muitoBom - Top 10%\"].outlierScore.toString(),\n      niveisPerformance[\"bom - Top 25%\"].outlierScore.toString(),\n      niveisPerformance[\"medio - 50% (Mediana)\"].outlierScore.toString(),\n      niveisPerformance[\"abaixoMedia - Bottom 25%\"].outlierScore.toString()\n    ]\n  };\n  \n  // =============================================\n  // INSIGHTS DO NICHO\n  // =============================================\n  \n  const insights = {\n    viewsTotal: Math.round(metricas_totais.view),\n    likesTotal: Math.round(metricas_totais.likes),\n    comentariosTotal: Math.round(metricas_totais.comentarios),\n    duracaoMediaMinutos: parseFloat(((benchmarks.duracaoSegundos.media || 0) / 60).toFixed(2)),\n    idadeMediaDias: benchmarks.diasPublicado.media || 0,\n    \n    taxaEngagementGeral: parseFloat((\n      metricas_totais.view > 0 \n        ? (metricas_totais.likes / metricas_totais.view) * 100 \n        : 0\n    ).toFixed(2)),\n    \n    rangeEsperado: {\n      views: `${(benchmarks.view.p25 || 0).toLocaleString()} - ${(benchmarks.view.p75 || 0).toLocaleString()}`,\n      engagementRate: `${benchmarks.engagementRate.p25 || 0}% - ${benchmarks.engagementRate.p75 || 0}%`,\n      viewsPerDay: `${(benchmarks.viewsPerDay.p25 || 0).toLocaleString()} - ${(benchmarks.viewsPerDay.p75 || 0).toLocaleString()}`\n    }\n  };\n  \n  // =============================================\n  // LOG E OUTPUT\n  // =============================================\n  \n  console.log('✅ Análise concluída!');\n  console.log(`📊 Total de amostras: ${totalAmostras}`);\n  console.log(`👁️  Views totais (estimado): ${insights.viewsTotal.toLocaleString()}`);\n  console.log(`💬 Taxa de engagement geral: ${insights.taxaEngagementGeral}%`);\n  console.log(`\\n🏆 NÍVEIS DE PERFORMANCE:`);\n  console.log(`   Excepcional (Top 1%): ${niveisPerformance[\"excepcional - Top 1%\"].view.toLocaleString()} views`);\n  console.log(`   Excelente (Top 5%): ${niveisPerformance[\"excelente - Top 5%\"].view.toLocaleString()} views`);\n  console.log(`   Muito Bom (Top 10%): ${niveisPerformance[\"muitoBom - Top 10%\"].view.toLocaleString()} views`);\n  console.log(`   Bom (Top 25%): ${niveisPerformance[\"bom - Top 25%\"].view.toLocaleString()} views`);\n  \n  return [{\n    json: {\n      // Arrays para Google Sheets\n      niveisPerformance: niveisArray,\n      \n      // Insights\n      insights: insights,\n      \n      dataAnalise: new Date().toISOString()\n    }\n  }];\n  \n} catch (error) {\n  console.error('❌ ERRO no nó de análise:', error.message);\n  console.error('Stack:', error.stack);\n  throw error;\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        224
      ],
      "id": "524e36d0-f040-4d48-b234-b5f030348178",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a261f1e0-4f68-4f96-afd7-8723e82957f0",
              "name": "niveisPerformance.Nivel",
              "value": "={{ $json.niveisPerformance.Nivel }}",
              "type": "array"
            },
            {
              "id": "018ab2cc-6b0e-4d5e-a6b5-29217c4bc6d5",
              "name": "niveisPerformance.view",
              "value": "={{ $json.niveisPerformance.view }}",
              "type": "array"
            },
            {
              "id": "161fef81-b68a-4e5a-a939-fe0e321b0ec0",
              "name": "niveisPerformance.engagementRate",
              "value": "={{ $json.niveisPerformance.engagementRate }}",
              "type": "array"
            },
            {
              "id": "72f0be08-1a37-4597-a94c-597bd0376451",
              "name": "niveisPerformance.likeRate",
              "value": "={{ $json.niveisPerformance.likeRate }}",
              "type": "array"
            },
            {
              "id": "b210918e-a531-4070-906b-6f20ce78ac05",
              "name": "niveisPerformance.commentRate",
              "value": "={{ $json.niveisPerformance.commentRate }}",
              "type": "array"
            },
            {
              "id": "3398333c-c697-418e-9f32-0725e64a05c7",
              "name": "niveisPerformance.totalEngagementRate",
              "value": "={{ $json.niveisPerformance.totalEngagementRate }}",
              "type": "array"
            },
            {
              "id": "b8d9d039-9974-4785-88b2-a2a9d55ac865",
              "name": "niveisPerformance.viewsPerDay",
              "value": "={{ $json.niveisPerformance.viewsPerDay }}",
              "type": "array"
            },
            {
              "id": "be4c66a3-cfe0-4bed-8f18-c6a1d5d95925",
              "name": "niveisPerformance.outlierScore",
              "value": "={{ $json.niveisPerformance.outlierScore }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -208,
        224
      ],
      "id": "f4535a02-dab6-4802-a1a0-e22e95ae0efa",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "fieldToSplitOut": "niveisPerformance.Nivel, niveisPerformance.view, niveisPerformance.engagementRate, niveisPerformance.likeRate, niveisPerformance.commentRate, niveisPerformance.totalEngagementRate, niveisPerformance.viewsPerDay, niveisPerformance.outlierScore",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        16,
        224
      ],
      "id": "b5dab171-9728-49f7-947b-1e20dd681c4e",
      "name": "Split Out2"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 78424668,
          "mode": "list",
          "cachedResultName": "ANÁLISE",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=78424668"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Nível": "={{ $json[\"niveisPerformance.Nivel\"] }}",
            "view": "={{ $json[\"niveisPerformance.view\"] }}",
            "engagementRate": "={{ $json[\"niveisPerformance.engagementRate\"] }}",
            "likeRate": "={{ $json[\"niveisPerformance.likeRate\"] }}",
            "commentRate": "={{ $json[\"niveisPerformance.commentRate\"] }}",
            "totalEngagementRate": "={{ $json[\"niveisPerformance.totalEngagementRate\"] }}",
            "viewsPerDay": "={{ $json[\"niveisPerformance.viewsPerDay\"] }}",
            "outlierScore": "={{ $json[\"niveisPerformance.outlierScore\"] }}"
          },
          "matchingColumns": [
            "Nível"
          ],
          "schema": [
            {
              "id": "Nível",
              "displayName": "Nível",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "view",
              "displayName": "view",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "engagementRate",
              "displayName": "engagementRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "likeRate",
              "displayName": "likeRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "commentRate",
              "displayName": "commentRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "totalEngagementRate",
              "displayName": "totalEngagementRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "viewsPerDay",
              "displayName": "viewsPerDay",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "outlierScore",
              "displayName": "outlierScore",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        464,
        224
      ],
      "id": "45e0213a-d1a4-4067-8873-e6d4076996d7",
      "name": "Append or update row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 78424668,
          "mode": "list",
          "cachedResultName": "ANÁLISE",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=78424668"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        -624,
        512
      ],
      "id": "cebb399c-1c1d-4489-93a8-ef18f95b0401",
      "name": "Google Sheets Trigger2",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "6Z6MEbvijNLMdskV",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "DADOSBRUTOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -400,
        512
      ],
      "id": "7a486dae-2bfb-4028-95be-044c2e90ae11",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =============================================\n// CODE NODE - RANKEAR E CLASSIFICAR VÍDEOS\n// Compara cada vídeo com os benchmarks e gera ranking\n// =============================================\n\nconst INICIO = Date.now();\n\n// =============================================\n// SEPARAR OS 2 INPUTS\n// =============================================\n\n// BENCHMARKS: Vêm do nó \"Google Sheets Trigger2\" (6 níveis de performance)\nconst benchmarksItems = $('Google Sheets Trigger2').all();\n\n// VÍDEOS: Vêm do input atual (todos os vídeos da planilha)\nconst videosItems = $input.all();\n\nconsole.log(`📥 Benchmarks recebidos de \"Google Sheets Trigger2\": ${benchmarksItems.length}`);\nconsole.log(`🎬 Vídeos recebidos: ${videosItems.length}`);\n\n// =============================================\n// CONVERTER BENCHMARKS PARA FORMATO UTILIZÁVEL\n// =============================================\n\n// Função auxiliar para converter valores (trata string, número, e vazios)\nfunction parseValue(value) {\n  if (value === \"\" || value === null || value === undefined) return 0;\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? 0 : parsed;\n}\n\nconst benchmarks = {\n  view: {\n    p99: parseValue(benchmarksItems[0]?.json.view),      // Excepcional\n    p95: parseValue(benchmarksItems[1]?.json.view),      // Excelente\n    p90: parseValue(benchmarksItems[2]?.json.view),      // Muito Bom\n    p75: parseValue(benchmarksItems[3]?.json.view),      // Bom\n    p50: parseValue(benchmarksItems[4]?.json.view),      // Médio\n    p25: parseValue(benchmarksItems[5]?.json.view)       // Abaixo da Média\n  },\n  engagementRate: {\n    p99: parseValue(benchmarksItems[0]?.json.engagementRate),\n    p95: parseValue(benchmarksItems[1]?.json.engagementRate),\n    p90: parseValue(benchmarksItems[2]?.json.engagementRate),\n    p75: parseValue(benchmarksItems[3]?.json.engagementRate),\n    p50: parseValue(benchmarksItems[4]?.json.engagementRate),\n    p25: parseValue(benchmarksItems[5]?.json.engagementRate)\n  },\n  likeRate: {\n    p99: parseValue(benchmarksItems[0]?.json.likeRate),\n    p95: parseValue(benchmarksItems[1]?.json.likeRate),\n    p90: parseValue(benchmarksItems[2]?.json.likeRate),\n    p75: parseValue(benchmarksItems[3]?.json.likeRate),\n    p50: parseValue(benchmarksItems[4]?.json.likeRate),\n    p25: parseValue(benchmarksItems[5]?.json.likeRate)\n  },\n  commentRate: {\n    p99: parseValue(benchmarksItems[0]?.json.commentRate),\n    p95: parseValue(benchmarksItems[1]?.json.commentRate),\n    p90: parseValue(benchmarksItems[2]?.json.commentRate),\n    p75: parseValue(benchmarksItems[3]?.json.commentRate),\n    p50: parseValue(benchmarksItems[4]?.json.commentRate),\n    p25: parseValue(benchmarksItems[5]?.json.commentRate)\n  },\n  totalEngagementRate: {\n    p99: parseValue(benchmarksItems[0]?.json.totalEngagementRate),\n    p95: parseValue(benchmarksItems[1]?.json.totalEngagementRate),\n    p90: parseValue(benchmarksItems[2]?.json.totalEngagementRate),\n    p75: parseValue(benchmarksItems[3]?.json.totalEngagementRate),\n    p50: parseValue(benchmarksItems[4]?.json.totalEngagementRate),\n    p25: parseValue(benchmarksItems[5]?.json.totalEngagementRate)\n  },\n  viewsPerDay: {\n    p99: parseValue(benchmarksItems[0]?.json.viewsPerDay),\n    p95: parseValue(benchmarksItems[1]?.json.viewsPerDay),\n    p90: parseValue(benchmarksItems[2]?.json.viewsPerDay),\n    p75: parseValue(benchmarksItems[3]?.json.viewsPerDay),\n    p50: parseValue(benchmarksItems[4]?.json.viewsPerDay),\n    p25: parseValue(benchmarksItems[5]?.json.viewsPerDay)\n  },\n  outlierScore: {\n    p99: parseValue(benchmarksItems[0]?.json.outlierScore),\n    p95: parseValue(benchmarksItems[1]?.json.outlierScore),\n    p90: parseValue(benchmarksItems[2]?.json.outlierScore),\n    p75: parseValue(benchmarksItems[3]?.json.outlierScore),\n    p50: parseValue(benchmarksItems[4]?.json.outlierScore),\n    p25: parseValue(benchmarksItems[5]?.json.outlierScore)\n  }\n};\n\nconsole.log('✅ Benchmarks reconstruídos');\nconsole.log('📊 view p99:', benchmarks.view.p99);\nconsole.log('📊 engagementRate p99:', benchmarks.engagementRate.p99);\nconsole.log('📊 outlierScore p90:', benchmarks.outlierScore.p90);\nconsole.log('📊 viewsPerDay p99:', benchmarks.viewsPerDay.p99);\n\nconst totalVideos = videosItems.length;\nconsole.log(`🚀 Iniciando rankeamento de ${totalVideos} vídeos...`);\n\n// =============================================\n// FUNÇÕES DE CLASSIFICAÇÃO\n// =============================================\n\nfunction classificarMetrica(valor, benchmark) {\n  if (valor >= benchmark.p99) return { nivel: 'Excepcional', pontos: 100 };\n  if (valor >= benchmark.p95) return { nivel: 'Excelente', pontos: 90 };\n  if (valor >= benchmark.p90) return { nivel: 'Muito Bom', pontos: 80 };\n  if (valor >= benchmark.p75) return { nivel: 'Bom', pontos: 70 };\n  if (valor >= benchmark.p50) return { nivel: 'Médio', pontos: 50 };\n  if (valor >= benchmark.p25) return { nivel: 'Abaixo da Média', pontos: 30 };\n  return { nivel: 'Muito Baixo', pontos: 10 };\n}\n\nfunction calcularPercentilRank(valor, benchmark) {\n  if (valor >= benchmark.p99) return 99;\n  if (valor >= benchmark.p95) return 95;\n  if (valor >= benchmark.p90) return 90;\n  if (valor >= benchmark.p75) return 75;\n  if (valor >= benchmark.p50) return 50;\n  if (valor >= benchmark.p25) return 25;\n  return 10;\n}\n\n// =============================================\n// PROCESSAR E RANKEAR CADA VÍDEO\n// =============================================\n\nconst videosRankeados = videosItems.map((item, index) => {\n  const data = item.json;\n  \n  // Extrair dados do vídeo\n  const video = {\n    id: data.ID || data.id || `video_${index}`,\n    titulo: data[\"Titulo \"] || data.Titulo || data.titulo || \"\",\n    link: data.Link || data.link || \"\",\n    thumb: data.Thumb || data.thumb || \"\",\n    canal: data.Canal || data.canal || \"\",\n    view: parseFloat(data.View || data.view || 0),\n    likes: parseFloat(data.Likes || data.likes || 0),\n    comentarios: parseFloat(data[\"Comentarios \"] || data.Comentarios || 0),\n    inscritos: parseFloat(data.Inscritos || data.inscritos || 1),\n    diasPublicado: parseFloat(data.Diaspublicados || data.diasPublicado || 1),\n    duracaoSegundos: parseFloat(data.DuracaoSegundos || data.duracaoSegundos || 0),\n    formatoVideo: data.FormatoVideo || data.formatoVideo || \"\",\n    engagementRate: parseFloat(data.EngajamentoRate || data.engagementRate || 0),\n    likeRate: parseFloat(data.LikeRate || data.likeRate || 0),\n    commentRate: parseFloat(data.CommetRate || data.commentRate || 0),\n    totalEngagementRate: parseFloat(data.totalEngagementRate || 0),\n    viewsPerDay: parseFloat(data.viewsPerDay || 0),\n    outlierScore: parseFloat(data.outlierScore || 0)\n  };\n  \n  // Classificar cada métrica\n  const classificacoes = {\n    view: classificarMetrica(video.view, benchmarks.view),\n    engagementRate: classificarMetrica(video.engagementRate, benchmarks.engagementRate),\n    outlierScore: classificarMetrica(video.outlierScore, benchmarks.outlierScore),\n    viewsPerDay: classificarMetrica(video.viewsPerDay, benchmarks.viewsPerDay),\n    likeRate: classificarMetrica(video.likeRate, benchmarks.likeRate),\n    commentRate: classificarMetrica(video.commentRate, benchmarks.commentRate),\n    totalEngagementRate: classificarMetrica(video.totalEngagementRate, benchmarks.totalEngagementRate)\n  };\n  \n  // Percentil ranks\n  const percentilRanks = {\n    view: calcularPercentilRank(video.view, benchmarks.view),\n    engagementRate: calcularPercentilRank(video.engagementRate, benchmarks.engagementRate),\n    outlierScore: calcularPercentilRank(video.outlierScore, benchmarks.outlierScore),\n    viewsPerDay: calcularPercentilRank(video.viewsPerDay, benchmarks.viewsPerDay)\n  };\n  \n  // Score composto (média ponderada)\n  const scoreComposto = (\n    (classificacoes.view.pontos * 0.25) +           // 25% views\n    (classificacoes.engagementRate.pontos * 0.20) + // 20% engagement\n    (classificacoes.outlierScore.pontos * 0.20) +   // 20% outlier\n    (classificacoes.viewsPerDay.pontos * 0.15) +    // 15% views/dia\n    (classificacoes.likeRate.pontos * 0.10) +       // 10% like rate\n    (classificacoes.commentRate.pontos * 0.05) +    // 5% comment rate\n    (classificacoes.totalEngagementRate.pontos * 0.05) // 5% total engagement\n  );\n  \n  // Classificação geral baseada no score\n  let classificacaoGeral = 'Médio';\n  if (scoreComposto >= 95) classificacaoGeral = 'Excepcional';\n  else if (scoreComposto >= 85) classificacaoGeral = 'Excelente';\n  else if (scoreComposto >= 75) classificacaoGeral = 'Muito Bom';\n  else if (scoreComposto >= 60) classificacaoGeral = 'Bom';\n  else if (scoreComposto >= 40) classificacaoGeral = 'Médio';\n  else if (scoreComposto >= 25) classificacaoGeral = 'Abaixo da Média';\n  else classificacaoGeral = 'Muito Baixo';\n  \n  // Flags especiais\n  const flags = {\n    topPerformer: scoreComposto >= 85,\n    viralPotential: video.outlierScore > benchmarks.outlierScore.p90,\n    highEngagement: video.engagementRate > benchmarks.engagementRate.p75,\n    rapidGrowth: video.viewsPerDay > benchmarks.viewsPerDay.p90,\n    smallChannelWin: video.inscritos < 10000 && video.outlierScore > benchmarks.outlierScore.p75\n  };\n  \n  return {\n    // Dados originais\n    ...video,\n    \n    // Rankings e scores\n    scoreComposto: parseFloat(scoreComposto.toFixed(2)),\n    classificacaoGeral: classificacaoGeral,\n    \n    // Classificações por métrica\n    classificacoes: {\n      view: classificacoes.view.nivel,\n      engagementRate: classificacoes.engagementRate.nivel,\n      outlierScore: classificacoes.outlierScore.nivel,\n      viewsPerDay: classificacoes.viewsPerDay.nivel,\n      likeRate: classificacoes.likeRate.nivel,\n      commentRate: classificacoes.commentRate.nivel\n    },\n    \n    // Percentis\n    percentilRanks: percentilRanks,\n    \n    // Flags\n    flags: flags\n  };\n});\n\n// Ordenar por score composto (maior para menor)\nvideosRankeados.sort((a, b) => b.scoreComposto - a.scoreComposto);\n\n// Adicionar posição no ranking\nvideosRankeados.forEach((video, index) => {\n  video.posicaoRanking = index + 1;\n});\n\n// =============================================\n// DEDUPLICAÇÃO\n// =============================================\n\n// Remover duplicatas usando o ID como chave única\nconst videosUnicosMap = new Map();\n\nvideosRankeados.forEach(video => {\n  const chaveUnica = video.id;\n  \n  if (!videosUnicosMap.has(chaveUnica)) {\n    videosUnicosMap.set(chaveUnica, video);\n  } else {\n    const videoExistente = videosUnicosMap.get(chaveUnica);\n    if (video.scoreComposto > videoExistente.scoreComposto) {\n      videosUnicosMap.set(chaveUnica, video);\n    }\n  }\n});\n\n// Converter para array\nconst videosFinais = Array.from(videosUnicosMap.values());\n\n// Reordenar por score (maior para menor)\nvideosFinais.sort((a, b) => b.scoreComposto - a.scoreComposto);\n\n// Recalcular posições no ranking\nvideosFinais.forEach((video, index) => {\n  video.posicaoRanking = index + 1;\n});\n\n// =============================================\n// ESTATÍSTICAS DO RANKING\n// =============================================\n\nconst stats = {\n  totalVideos: videosFinais.length,\n  videosOriginais: videosRankeados.length,\n  duplicatasRemovidas: videosRankeados.length - videosFinais.length,\n  topPerformers: videosFinais.filter(v => v.flags.topPerformer).length,\n  viralVideos: videosFinais.filter(v => v.flags.viralPotential).length,\n  highEngagementVideos: videosFinais.filter(v => v.flags.highEngagement).length,\n  smallChannelWins: videosFinais.filter(v => v.flags.smallChannelWin).length,\n  \n  distribuicao: {\n    excepcional: videosFinais.filter(v => v.classificacaoGeral === 'Excepcional').length,\n    excelente: videosFinais.filter(v => v.classificacaoGeral === 'Excelente').length,\n    muitoBom: videosFinais.filter(v => v.classificacaoGeral === 'Muito Bom').length,\n    bom: videosFinais.filter(v => v.classificacaoGeral === 'Bom').length,\n    medio: videosFinais.filter(v => v.classificacaoGeral === 'Médio').length,\n    abaixoDaMedia: videosFinais.filter(v => v.classificacaoGeral === 'Abaixo da Média').length,\n    muitoBaixo: videosFinais.filter(v => v.classificacaoGeral === 'Muito Baixo').length\n  }\n};\n\n// =============================================\n// LOG E PERFORMANCE\n// =============================================\n\nconst TEMPO_TOTAL = ((Date.now() - INICIO) / 1000).toFixed(2);\n\nconsole.log('\\n✅ RANKEAMENTO CONCLUÍDO!');\nconsole.log(`⏱️  Tempo: ${TEMPO_TOTAL}s`);\nconsole.log(`📊 Vídeos processados: ${videosRankeados.length}`);\nconsole.log(`🎯 Vídeos únicos: ${videosFinais.length}`);\nif (stats.duplicatasRemovidas > 0) {\n  console.log(`🔄 Duplicatas removidas: ${stats.duplicatasRemovidas}`);\n}\n\nconsole.log(`\\n🏆 TOP 5 VÍDEOS:`);\nvideosFinais.slice(0, 5).forEach((v, i) => {\n  console.log(`   ${i+1}. ${v.titulo.substring(0, 50)}... (Score: ${v.scoreComposto})`);\n});\n\nconsole.log(`\\n📈 DISTRIBUIÇÃO:`);\nconsole.log(`   Excepcional: ${stats.distribuicao.excepcional}`);\nconsole.log(`   Excelente: ${stats.distribuicao.excelente}`);\nconsole.log(`   Muito Bom: ${stats.distribuicao.muitoBom}`);\nconsole.log(`   Bom: ${stats.distribuicao.bom}`);\n\n// =============================================\n// OUTPUT - RETORNAR VÍDEOS ÚNICOS RANKEADOS\n// =============================================\n\nreturn videosFinais.map(video => ({\n  json: video\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        512
      ],
      "id": "94cef9ec-cd62-4a1e-9976-8d41a7a7cb5d",
      "name": "Code in JavaScript4"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 304295346,
          "mode": "list",
          "cachedResultName": "Dados ordenados ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=304295346"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ID": "={{ $json.id }}",
            "Titulo ": "={{ $json.titulo }}",
            "Link": "={{ $json.link }}",
            "EngajamentoRate": "={{ $json.engagementRate }}",
            "LikeRate": "={{ $json.likeRate }}",
            "CommetRate": "={{ $json.commentRate }}",
            "totalEngagement": "={{ $json.engagementRate }}",
            "totalEngagementRate": "={{ $json.totalEngagementRate }}",
            "viewsPerDay": "={{ $json.viewsPerDay }}",
            "outlierScore": "={{ $json.outlierScore }}",
            "Score Final": "={{ $json.scoreComposto }}",
            "Classificação": "={{ $json.classificacoes }}",
            "ClassificaçãoGeral": "={{ $json.classificacaoGeral }}",
            "Flags": "={{ $json.flags }}",
            "Thumb": "={{ $json.thumb }}",
            "FormatoVideo": "={{ $json.formatoVideo }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Titulo ",
              "displayName": "Titulo ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Link",
              "displayName": "Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Thumb",
              "displayName": "Thumb",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "DescriçãoThumb",
              "displayName": "DescriçãoThumb",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Transcrição",
              "displayName": "Transcrição",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "FormatoVideo",
              "displayName": "FormatoVideo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "EngajamentoRate",
              "displayName": "EngajamentoRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "LikeRate",
              "displayName": "LikeRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CommetRate",
              "displayName": "CommetRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "totalEngagement",
              "displayName": "totalEngagement",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "totalEngagementRate",
              "displayName": "totalEngagementRate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "viewsPerDay",
              "displayName": "viewsPerDay",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "outlierScore",
              "displayName": "outlierScore",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Score Final",
              "displayName": "Score Final",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ClassificaçãoGeral",
              "displayName": "ClassificaçãoGeral",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Classificação",
              "displayName": "Classificação",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Flags",
              "displayName": "Flags",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        224,
        512
      ],
      "id": "39c4b9ed-f247-4fc3-b8d5-50eeb6ebbaa2",
      "name": "Append row in sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "DADOSBRUTOS",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=0"
        },
        "keepFirstRow": true
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        272,
        -384
      ],
      "id": "83c4b5ad-4ac8-4b0d-8365-d6a04630dd7a",
      "name": "Clear sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## PRIMEIRA PARTE: Extrai Dados Brutos",
        "height": 224,
        "width": 2400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -736,
        -448
      ],
      "typeVersion": 1,
      "id": "040e0eda-79e6-4fa7-a48b-148a34dbcbe1",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 156227565,
          "mode": "list",
          "cachedResultName": "BenchMark",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=156227565"
        },
        "keepFirstRow": true
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        240,
        -80
      ],
      "id": "25fd5982-4737-4786-b061-779f3f88e9d2",
      "name": "Clear sheet1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## SEGUNDA PARTE: BenchMark Estatístico",
        "height": 240,
        "width": 2416,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -752,
        -144
      ],
      "typeVersion": 1,
      "id": "f8e628b5-be67-4d45-8b3e-fb7afdab6115",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 78424668,
          "mode": "list",
          "cachedResultName": "Metricas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=78424668"
        },
        "keepFirstRow": true
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        240,
        224
      ],
      "id": "3f8f3c7c-ed91-4bc1-998a-6c7d34226ec2",
      "name": "Clear sheet2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "## TERCEIRA PARTE: Níveis de Referência",
        "height": 240,
        "width": 2416,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -752,
        144
      ],
      "typeVersion": 1,
      "id": "f2d1ceab-1ab5-483a-b9d2-e80fc32b7d3b",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "formTitle": "Raspagem Youtube",
        "formDescription": "Define aqui os párametros da sua busca",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Nicho",
              "requiredField": true
            },
            {
              "fieldLabel": "Quantidade esperada",
              "fieldType": "number",
              "requiredField": true
            },
            {
              "fieldLabel": "Filtro por ",
              "fieldType": "checkbox",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Sem Filtro"
                  },
                  {
                    "option": "Relevância"
                  },
                  {
                    "option": "Data do Upload"
                  },
                  {
                    "option": "Contagem de visualizações"
                  }
                ]
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [
        -624,
        -384
      ],
      "id": "a06f013e-202e-485b-b501-6ce2374be597",
      "name": "On form submission",
      "webhookId": "a46f3d8e-cd7f-4037-90e5-5e779af60073"
    },
    {
      "parameters": {
        "content": "## QUARTA PARTE: Rankeamento ",
        "height": 240,
        "width": 2416,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -768,
        432
      ],
      "typeVersion": 1,
      "id": "371f1218-155b-4ec8-8aa6-f95681dff396",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "clear",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 304295346,
          "mode": "list",
          "cachedResultName": "Dados ordenados ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=304295346"
        },
        "keepFirstRow": true
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        16,
        512
      ],
      "id": "79eaa308-44c2-434b-9590-eed179aa2856",
      "name": "Clear sheet3",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {
    "Google Sheets Trigger2": [
      {
        "json": {
          "Nível": "Excepcional - Top 1%",
          "view": 2580437,
          "engagementRate": "31.25",
          "likeRate": "312.5",
          "commentRate": "162.16",
          "totalEngagementRate": "40.54",
          "viewsPerDay": 11831,
          "outlierScore": "6102.94"
        }
      },
      {
        "json": {
          "Nível": "Excelente - Top 5%",
          "view": 760130,
          "engagementRate": "11.76",
          "likeRate": "117.65",
          "commentRate": 50,
          "totalEngagementRate": "17.65",
          "viewsPerDay": 5107,
          "outlierScore": "1946.99"
        }
      },
      {
        "json": {
          "Nível": "Muito Bom - Top 10%",
          "view": 334378,
          "engagementRate": "6.67",
          "likeRate": "66.67",
          "commentRate": "20.48",
          "totalEngagementRate": "8.17",
          "viewsPerDay": 2249,
          "outlierScore": "722.67"
        }
      },
      {
        "json": {
          "Nível": "Bom - Top 25%",
          "view": 11486,
          "engagementRate": 45692,
          "likeRate": "41.95",
          "commentRate": "4.67",
          "totalEngagementRate": "4.93",
          "viewsPerDay": 121,
          "outlierScore": "188.52"
        }
      },
      {
        "json": {
          "Nível": "Médio - 50% (Mediana)",
          "view": 381,
          "engagementRate": "2.53",
          "likeRate": "25.32",
          "commentRate": 45658,
          "totalEngagementRate": "2.74",
          "viewsPerDay": 9,
          "outlierScore": "22.48"
        }
      },
      {
        "json": {
          "Nível": "Abaixo da Média - 25% Inferiores",
          "view": 52,
          "engagementRate": "1.22",
          "likeRate": "12.18",
          "commentRate": "",
          "totalEngagementRate": "1.34",
          "viewsPerDay": 1,
          "outlierScore": 45812
        }
      }
    ]
  },
  "connections": {
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Clear sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        []
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Clear sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger1": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Clear sheet2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger2": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code in JavaScript4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript4": {
      "main": [
        [
          {
            "node": "Clear sheet3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear sheet": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear sheet1": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear sheet2": {
      "main": [
        [
          {
            "node": "Append or update row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clear sheet3": {
      "main": [
        [
          {
            "node": "Append row in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false,
    "timeSavedPerExecution": 1440
  },
  "versionId": "3b5ffa46-d93c-4758-b20b-4011c20d007b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c5d6c53e60bd1d3aa2e715f321339a9825e6c2e5b18beaf3f0749145af2adffd"
  },
  "id": "taQ1va3E70lYISW1",
  "tags": []
}