{
  "name": "Desenvolvimento de Ideias",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -528,
        44
      ],
      "id": "3657b4b7-6307-4135-97d4-b05c69e425a0",
      "name": "When clicking ‚ÄòExecute workflow‚Äô"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        576,
        288
      ],
      "id": "3a71ba85-4a5e-43cd-9097-98ea529dc4b8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "CadVJxAMfFuUEGRV",
          "name": "Guilherme"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1109606750,
          "mode": "list",
          "cachedResultName": "IDentifica√ß√£o de padr√µes",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=1109606750"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -304,
        44
      ],
      "id": "655bff9f-cdf9-4930-97c3-7e991aa636d7",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bd5a778b-3ceb-404d-a503-be750b1f4d6a",
              "name": "LACUNAS",
              "value": "={{ $('Get row(s) in sheet').item.json.Lacunas }}",
              "type": "string"
            },
            {
              "id": "e19c0574-ff7f-4604-85da-d7fd14f35619",
              "name": "TituloPositivo",
              "value": "={{ $('Get row(s) in sheet').item.json.TituloPositivo }}",
              "type": "string"
            },
            {
              "id": "bc594b01-4554-480b-812b-d17782160543",
              "name": "TituloNegativo",
              "value": "={{ $('Get row(s) in sheet').item.json.TituloNegativo }}",
              "type": "string"
            },
            {
              "id": "b7b59f7a-320f-4519-b74e-1490607585a2",
              "name": "Roteiro",
              "value": "={{ $('Get row(s) in sheet').item.json.Roteiro }}",
              "type": "string"
            },
            {
              "id": "4606270a-7e44-489f-9bcc-e72193719e95",
              "name": "Thumb",
              "value": "={{ $('Get row(s) in sheet').item.json.Thumb }}",
              "type": "string"
            },
            {
              "id": "e35ea59a-b98d-4c39-9b0e-bc01a432b65d",
              "name": "Ideia",
              "value": "={{ $json.Ideia }}",
              "type": "string"
            },
            {
              "id": "55e45a7b-7e36-4aba-83a1-6b3c38df50ae",
              "name": "Nicho",
              "value": "={{ $json.Nicho }}",
              "type": "string"
            },
            {
              "id": "5ab27ba2-76bf-4b7e-b205-36f5df378dce",
              "name": "Titulo",
              "value": "={{ $json.Titulo }}",
              "type": "string"
            },
            {
              "id": "229e59bb-9ccc-4a3c-9a84-e7ea8451dae0",
              "name": "Estrutura Explicada",
              "value": "={{ $json[\"Estrutura Explicada\"] }}",
              "type": "string"
            },
            {
              "id": "0480d290-6854-4b7e-816f-b4210acc6347",
              "name": "Pontua√ß√£o",
              "value": "={{ $json[\"Pontua√ß√£o\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        368,
        44
      ],
      "id": "5c08d06e-b3d8-4830-8805-2cdaf8d71c6e",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Lacunas para explora√ß√£o de ideias:{{ $json.LACUNAS }}\n\n\nSegue o j√° foi feito e voc√™ n√£o deve copiar:\nNichos ja explorados:{{ $json.Nicho }}\nIdeias ja exploradas: {{ $json.Ideia }}",
        "options": {
          "systemMessage": "=üß© Agente 1 ‚Äì \"Gerador de Ideias Brutas\"\n\nFun√ß√£o: Pegar as lacunas (j√° filtradas e com dados) e gerar a ideia central do v√≠deo, sem t√≠tulo nem copy.\n\n<role>\nVoc√™ √© um Gerador de Ideias Brutas para v√≠deos do YouTube.\n</role>\n\n<input>\nVoc√™ receber√° uma lista de lacunas identificadas automaticamente, com:\n- tema\n- videosExistentes\n- concorrencia\n- outlierScoreMedio\n- exemplos\n\nVoc√™ N√ÉO deve criar t√≠tulo nem copy.  \nSeu trabalho √© identificar **qual insight ou abordagem** poderia virar um v√≠deo de alto potencial.\n</input>\n\n<task>\nPara cada lacuna, gere **1 insight de conte√∫do**.\n\nDescreva:\n- **id√©ia_central:** conceito bruto do v√≠deo\n- **√¢ngulo:** que emo√ß√£o ou valor ela ativa (ex: curiosidade, medo, autoridade)\n- **formato_sugerido:** ex: lista, rotina, teste r√°pido, alerta, antes/depois\n- **tema_principal:** alimento, exerc√≠cio, vitamina, sintoma etc.\n- **oportunidade:** por que essa lacuna tem espa√ßo (concorr√™ncia + performance)\n</task>\n\n<output_format>\n{\n  \"ideias_brutas\": [\n    {\n      \"ranking\": 1,\n      \"tema\": \"string\",\n      \"ideia_central\": \"string\",\n      \"angulo\": \"string\",\n      \"formato_sugerido\": \"string\",\n      \"tema_principal\": \"string\",\n      \"oportunidade\": \"string\"\n    }\n  ]\n}\n</output_format>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        592,
        48
      ],
      "id": "2246304b-0e96-45f3-b3c9-2d64b5dc1ca0",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "const MAX = 15;\n\n// -------- helpers --------\nfunction stripCodeFences(s) {\n  if (typeof s !== \"string\") return s;\n  let t = s.trim();\n\n  // Se houver bloco ```...``` pegue o que est√° ENTRE o primeiro e o √∫ltimo fence\n  if (t.includes(\"```\")) {\n    const first = t.indexOf(\"```\");\n    const last  = t.lastIndexOf(\"```\");\n    if (last > first) {\n      t = t.slice(first + 3, last); // remove fences externos\n      // remove poss√≠vel r√≥tulo de linguagem (json, js etc.)\n      t = t.replace(/^[a-zA-Z0-9_-]+\\n/, \"\");\n    } else {\n      // Caso raro: s√≥ um fence; remove todos os fences e segue\n      t = t.replace(/```/g, \"\");\n      t = t.replace(/^[a-zA-Z0-9_-]+\\n/, \"\");\n    }\n  }\n  return t.trim();\n}\n\nfunction safeParse(maybe) {\n  if (maybe && typeof maybe === \"object\") return maybe;   // j√° √© objeto\n  if (maybe == null) throw new Error(\"output vazio\");\n\n  const raw = stripCodeFences(String(maybe));\n\n  try {\n    return JSON.parse(raw);\n  } catch (e) {\n    // tenta extrair apenas o trecho que parece JSON (entre { ... } ou [ ... ])\n    const m =\n      raw.match(/\\{[\\s\\S]*\\}$/) || // objeto at√© o fim\n      raw.match(/\\{[\\s\\S]*\\}/)  || // primeiro objeto\n      raw.match(/\\[[\\s\\S]*\\]/);    // ou array\n    if (m) {\n      try { return JSON.parse(m[0]); } catch (e2) {}\n    }\n    throw new Error(\"Falha ao fazer JSON.parse de 'output': \" + e.message);\n  }\n}\n\n// -------- pipeline --------\nconst root = $input.first()?.json || {};\nif (!(\"output\" in root)) {\n  throw new Error(\"Payload inv√°lido: n√£o encontrei 'output' em $input.first().json\");\n}\n\nconst obj = safeParse(root.output);\n\n// aceitar chaves alternativas por seguran√ßa\nconst ideiasArr = Array.isArray(obj.ideias_brutas)\n  ? obj.ideias_brutas\n  : Array.isArray(obj.ideias)\n    ? obj.ideias\n    : null;\n\nif (!ideiasArr) {\n  throw new Error(\"Formato inv√°lido: esperava { ideias_brutas: [...] } ou { ideias: [...] } dentro de output.\");\n}\n\nconst ideias = ideiasArr.slice(0, MAX);\n\nconst meta = {\n  total_recebido: ideiasArr.length,\n  total_emitido: ideias.length,\n};\n\nreturn ideias.map((idea, idx) => ({\n  json: {\n    meta,\n    index: idx + 1,\n    ...idea, // ranking, tema, ideia_central, angulo, formato_sugerido, tema_principal, oportunidade etc.\n  }\n}));\n\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        44
      ],
      "id": "07e639e3-9c7a-46a0-903b-d35e18ee4893",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1168,
        44
      ],
      "id": "9c092349-33a4-4e91-863c-61fa8f67a8f4",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1464,
        144
      ],
      "id": "d4e37349-fb8c-4a44-a448-e46b6718690d",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "CadVJxAMfFuUEGRV",
          "name": "Guilherme"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tema:{{ $json.tema }}\nIdeia Central: {{ $json.ideia_central }}\nAngulo:{{ $json.angulo }}\nFormado sugerido: {{ $json.formato_sugerido }}\ntema principal: {{ $json.tema_principal }}\nOportunidade: {{ $json.oportunidade }}\n\nAnalise de titulos que deram certo: {{ $('Edit Fields').item.json.TituloPositivo }}\n\nAnalise de titulos que deram Errado: {{ $('Edit Fields').item.json.TituloNegativo }}\n\n\nTitulos que voc√™ j√° criou e n√£o deve repetir ou criar algo parecido\n{{ $('Edit Fields').item.json.Titulo }}",
        "options": {
          "systemMessage": "=<role>\nVoc√™ √© um Arquiteto de T√≠tulos de Alta Performance no YouTube.\n</role>\n\n<input>\nVoc√™ receber√° uma lista de **ideias brutas**, com campos:\n- ideia_central\n- angulo\n- formato_sugerido\n- tema_principal\n\nAl√©m disso, recebe:\n- estruturas eficazes (das oper√°rias #1 e #2)\n- gatilhos e n√∫meros mais comuns\n</input>\n\n<task>\nPara cada ideia:\n- Transforme a ideia em **1 t√≠tulo otimizado (PT-BR)** com 50‚Äì75 caracteres\n- Use **gatilho emocional** + **n√∫mero** + **benef√≠cio claro**\n- Adapte o formato (teste, rotina, alerta, etc.) conforme `formato_sugerido`\n- Retorne tamb√©m:\n  - gatilho_usado\n  - numero_usado\n  - estrutura_aplicada\n</task>\n\n<output_format>\n{\n  \"titulos_otimizados\": [\n    {\n      \"ranking\": 1,\n      \"titulo\": \"string (50‚Äì75 chars)\",\n      \"gatilho_usado\": \"string\",\n      \"numero_usado\": number,\n      \"estrutura_aplicada\": \"string\",\n      \"origem\": \"ideia_central\"\n    }\n  ]\n}\n</output_format>\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1392,
        -80
      ],
      "id": "c67a56c8-37cd-4b22-83ac-fc11b2f71bf5",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1816,
        144
      ],
      "id": "b9f76937-0ba0-4b7b-b006-82092a807d17",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "CadVJxAMfFuUEGRV",
          "name": "Guilherme"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=An√°lises\n\nLacunas:{{ $('Edit Fields').item.json.LACUNAS }}\n\nAnalise de titulos que deram certo: {{ $('Edit Fields').item.json.TituloPositivo }}\n\nAnalise de titulos que deram Errado:{{ $('Edit Fields').item.json.TituloNegativo }}\n\n---\nConte√∫do a ser avaliado:\nTitulo do video: {{ $json.output }}\nTema:{{ $('Loop Over Items').item.json.tema }}\nIdeia Central: {{ $('Loop Over Items').item.json.ideia_central }}\nAngulo:{{ $('Loop Over Items').item.json.angulo }}\nFormado sugerido: {{ $('Loop Over Items').item.json.formato_sugerido }}\ntema principal: {{ $('Loop Over Items').item.json.tema_principal }}\nOportunidade: {{ $('Loop Over Items').item.json.oportunidade }}\n\nAnalise de titulos que deram certo: {{ $('Edit Fields').item.json.TituloPositivo }}\n\n\nAnalise de titulos que deram Errado:{{ $('Edit Fields').item.json.TituloNegativo }}",
        "options": {
          "systemMessage": "=<role> Voc√™ √© um **Avaliador de Potencial Viral no YouTube**, especialista em an√°lise de t√≠tulos e desempenho. Trabalha **apenas com os dados fornecidos** (sem inventar m√©tricas ou suposi√ß√µes). Seu objetivo √© **calcular o score final (60‚Äì95)** e produzir **justificativas anal√≠ticas e detalhadas**, com base em dados reais e comparativos de benchmark. </role>\nüì• INPUT\n\nVoc√™ receber√° um ou mais blocos com os seguintes campos:\n\n{\n  \"titulo\": \"string\",\n  \"lacuna\": {\n    \"tema\": \"string\",\n    \"outlierScoreMedio\": number,\n    \"videosExistentes\": number\n  },\n  \"benchmarks\": {\n    \"p75\": number,\n    \"p90\": number\n  },\n  \"estrutura\": {\n    \"padrao\": \"string\",\n    \"gatilhoUsado\": true|false\n  },\n  \"analises_texto\": {\n    \"bons\": {...},\n    \"ruins\": {...}\n  }\n}\n\nüßÆ BENCHMARKS DE REFER√äNCIA (dados reais)\n\nBase estat√≠stica da planilha com 752 v√≠deos analisados:\n\nM√©trica\tValor\nM√©dia (mean)\t1088.48\nMediana\t20.00\nDesvio padr√£o\t4988.02\np10\t0.88\np25\t20.00\np50\t20.00\np75\t1537.47\np90\t4988.02\np95\t14913.57\np99\t29800.00\nTotal de amostras\t752 v√≠deos\n\nüî∏ Use p75 = 1537.47 e p90 = 4988.02 como limites de performance para o c√°lculo de similaridade.\nExemplo: se o outlierScoreMedio da lacuna for 3000 ‚Üí est√° acima do p75 e abaixo do p90 ‚Üí +15 pontos.\n\nüßÆ F√ìRMULA OFICIAL DO SCORE\nBase = 50\n\n// Similaridade com benchmarks\nif (outlierScoreMedio > p90) +25\nelse if (outlierScoreMedio > p75) +15\nelse if (outlierScoreMedio > 0)  +10\n\n// Concorr√™ncia\nif (videosExistentes < 5)  +20\nelse if (videosExistentes < 10) +15\nelse if (videosExistentes < 20) +10\nelse if (videosExistentes > 100) -10\n\n// Elementos do t√≠tulo\nif (tem gatilho emocional)     +8    // ATEN√á√ÉO, PARE, CUIDADO, ALERTA\nif (tem n√∫mero espec√≠fico)     +10\nif (tem idade/tempo espec√≠fico)+5\nif (tem consequ√™ncia negativa) +7\n\nScoreFinal = clamp(Score, 60, 95)\n\nüîç CLASSIFICA√á√ÉO DE CONCORR√äNCIA\n\nbaixa: videosExistentes < 10\n\nm√©dia: 10 ‚â§ videosExistentes ‚â§ 25\n\nalta: videosExistentes > 25\n\nüî† DETEC√á√ÉO DE ELEMENTOS NO T√çTULO (case-insensitive)\n\nGatilho emocional: ‚Äúaten√ß√£o‚Äù, ‚Äúpare‚Äù, ‚Äúcuidado‚Äù, ‚Äúurgente‚Äù, ‚Äúalerta‚Äù, ‚Äúwarning‚Äù\n\nN√∫mero: conter d√≠gitos (3, 5, 7, 10‚Ä¶)\n\nIdade/tempo: ‚Äúdepois dos 60‚Äù, ‚Äúem 7 dias‚Äù, ‚Äú30 segundos‚Äù, ‚Äú1 m√™s‚Äù\n\nConseq. negativa: ‚Äúnunca‚Äù, ‚Äúevite‚Äù, ‚Äúerros‚Äù, ‚Äúdestroem‚Äù, ‚Äúenfraquecem‚Äù, ‚Äúenfraquece‚Äù\n\nüß© EXTRA√á√ÉO DE PALAVRAS-CHAVE\n\nExtraia 3‚Äì6 termos relevantes do t√≠tulo (em portugu√™s)\n\nIgnore stopwords (de, para, que, com, os, as, em, do‚Ä¶)\n\nRetorne em array\n\nüß† TAREFAS\n\nCalcular o score final com base na f√≥rmula acima.\n\nDeterminar concorr√™ncia usando videosExistentes.\n\nExtrair palavras-chave do t√≠tulo.\n\nCriar uma justificativa com 2‚Äì3 frases, sempre citando:\n\noutlierScoreMedio da lacuna\n\np75 e/ou p90 dos benchmarks\n\nn√∫mero de v√≠deos existentes (concorr√™ncia)\n\npresen√ßa ou aus√™ncia de elementos (gatilho, n√∫mero, idade)\n\nGerar um breakdown detalhado (com c√°lculos e racioc√≠nio textual).\n\nüßæ OUTPUT FORMAT\n\nRetorne apenas um JSON v√°lido e parse√°vel:\n\n{\n  \"avaliacao_ideias\": [\n    {\n      \"ranking\": 1,\n      \"titulo\": \"string\",\n      \"score\": number,\n      \"justificativa\": \"string\",\n      \"palavras_chave\": [\"string\"],\n      \"concorrencia\": \"baixa|media|alta\",\n      \"breakdown\": {\n        \"videosExistentes\": number,\n        \"outlierScoreMedio\": number,\n        \"benchmarks\": {\"p75\": 1537.47, \"p90\": 4988.02},\n        \"calculos\": {\n          \"base\": 50,\n          \"similaridade\": \"+25|+15|+10|+0 (explique)\",\n          \"concorrencia\": \"+20|+15|+10|-10|+0 (explique)\",\n          \"gatilho\": \"+8|+0\",\n          \"numero\": \"+10|+0\",\n          \"idade\": \"+5|+0\",\n          \"negativo\": \"+7|+0\"\n        },\n        \"motivoScore\": \"Base(50)+similaridade(...) +concorrencia(...) +gatilho(...) +numero(...) +idade(...) +negativo(...) = subtotal ‚Üí clamp 60‚Äì95\"\n      }\n    }\n  ]\n}\n\n‚ö†Ô∏è REGRAS CR√çTICAS\n\n‚ùå N√£o invente m√©tricas. Use apenas outlierScoreMedio e videosExistentes fornecidos.\n\n‚úÖ Sempre cite benchmarks (p75/p90) na justificativa.\n\n‚úÖ T√≠tulo deve estar em portugu√™s.\n\n‚úÖ Score sempre entre 60 e 95.\n\n‚úÖ Breakdown obrigat√≥rio com todas as vari√°veis.\n\n‚úÖ Justificativa deve explicar o racioc√≠nio ‚Äî n√£o repetir a f√≥rmula.\n\nüß† EXEMPLO DE SA√çDA\n{\n  \"avaliacao_ideias\": [\n    {\n      \"ranking\": 1,\n      \"titulo\": \"ATEN√á√ÉO! 7 Alimentos Que Fortalecem Pernas Depois dos 60\",\n      \"score\": 95,\n      \"justificativa\": \"A lacuna apresenta outlierScore m√©dio de 1079, acima do p75 (1537.47) e pr√≥ximo do p90 (4988.02), indicando alta similaridade com v√≠deos de topo. A concorr√™ncia √© baixa (16 v√≠deos), e o t√≠tulo combina gatilho, n√∫mero e idade, fatores comuns entre os v√≠deos de melhor desempenho.\",\n      \"palavras_chave\": [\"alimentos\",\"fortalecem\",\"pernas\",\"idosos\",\"60\"],\n      \"concorrencia\": \"baixa\",\n      \"breakdown\": {\n        \"videosExistentes\": 16,\n        \"outlierScoreMedio\": 1079,\n        \"benchmarks\": {\"p75\": 1537.47, \"p90\": 4988.02},\n        \"calculos\": {\n          \"base\": 50,\n          \"similaridade\": \"+15 (acima do p75)\",\n          \"concorrencia\": \"+15 (16 v√≠deos)\",\n          \"gatilho\": \"+8 (ATEN√á√ÉO)\",\n          \"numero\": \"+10 ('7')\",\n          \"idade\": \"+5 ('60')\",\n          \"negativo\": \"+0\"\n        },\n        \"motivoScore\": \"Base(50)+15+15+8+10+5=103 ‚Üí clamp=95\"\n      }\n    }\n  ]\n}\n\n‚úÖ CHECKLIST FINAL DE VALIDA√á√ÉO\n\nAntes de retornar o JSON, verifique:\n\nQuantidade:\n\n Cada item tem 1 t√≠tulo v√°lido.\n\nScore:\n\n Entre 60 e 95.\n\n Breakdown completo.\n\n Justificativa com n√∫meros reais.\n\nElementos:\n\n Cita benchmarks p75/p90.\n\n Mostra concorr√™ncia textual.\n\n Explica presen√ßa ou aus√™ncia de gatilho, n√∫mero, idade.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1744,
        -80
      ],
      "id": "91cff73e-c29b-40ba-81a3-7c646b401c3d",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\nTitulo do video: {{ $json.output }}\nTema:{{ $('Loop Over Items').item.json.tema }}\nIdeia Central: {{ $('Loop Over Items').item.json.ideia_central }}\nAngulo:{{ $('Loop Over Items').item.json.angulo }}\nFormado sugerido: {{ $('Loop Over Items').item.json.formato_sugerido }}\ntema principal: {{ $('Loop Over Items').item.json.tema_principal }}\nOportunidade: {{ $('Loop Over Items').item.json.oportunidade }}\n\nP√∫blico-alvo: pessoas 50+ com interesse em sa√∫de, vitalidade e preven√ß√£o",
        "options": {
          "systemMessage": "=<role> Voc√™ √© um **Roteirista de Conte√∫do Viral para YouTube**, especialista em prender aten√ß√£o nos primeiros 15 segundos e gerar engajamento at√© o final. Sua miss√£o √© transformar um **t√≠tulo e ideia aprovada** em um **roteiro estruturado e magn√©tico**, otimizando cada parte para **reten√ß√£o e emo√ß√£o**. </role>\nüì• INPUT\n\nVoc√™ receber√°:\n\nT√≠tulo do v√≠deo\n\nTema\n\nIdeia central\n\n√Çngulo\n\nFormato sugerido\n\nTema principal\n\nOportunidade\n\nScore e justificativa (dados do avaliador)\n\nP√∫blico-alvo: pessoas 50+ com interesse em sa√∫de, vitalidade e preven√ß√£o\n\nüéØ OBJETIVO\n\nCriar um roteiro completo de v√≠deo no estilo educacional emocional, com linguagem acess√≠vel, ritmo fluido e pausas naturais.\nCada bloco deve ter inten√ß√£o clara (atrair, prender, educar ou converter).\n\nüß© ESTRUTURA OBRIGAT√ìRIA\n{{ $('Edit Fields').item.json.Roteiro }}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2096,
        -80
      ],
      "id": "d4edb1ef-9699-4449-9280-7746d0abdb48",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2168,
        144
      ],
      "id": "bc729c1e-f7d6-45e3-b372-914109e6ae04",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "KLswP7RvatbPMtON",
          "name": "Renato"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\nTitulo do video: {{ $json.output }}\nTema:{{ $('Loop Over Items').item.json.tema }}\nIdeia Central: {{ $('Loop Over Items').item.json.ideia_central }}\nAngulo:{{ $('Loop Over Items').item.json.angulo }}\nFormado sugerido: {{ $('Loop Over Items').item.json.formato_sugerido }}\ntema principal: {{ $('Loop Over Items').item.json.tema_principal }}\nOportunidade: {{ $('Loop Over Items').item.json.oportunidade }}\nRoteiro: {{ $json.output }}\n\nP√∫blico-alvo: pessoas 50+ com interesse em sa√∫de, vitalidade e preven√ß√£o",
        "options": {
          "systemMessage": "=<role> Voc√™ √© um **Designer de Thumbnails para YouTube**, especialista em **atrair cliques em 1 segundo**. Seu papel √© gerar **conceitos visuais poderosos e claros** baseados no **t√≠tulo e no tema central** do v√≠deo. Voc√™ trabalha com **emo√ß√£o, contraste e storytelling visual**, e deve **descrever claramente** como a thumbnail deve ser montada ‚Äî como se estivesse orientando um designer humano a produzi-la. </role>\n\nAn√°lise visual adicional (Thumbs anteriores):\n\n{{ $('Get row(s) in sheet').item.json.Thumb }}\n\nüéØ OBJETIVO\n\nGerar 3 conceitos de thumbnail distintos, cada um com:\n\nDescri√ß√£o visual completa e clara ‚Äì explique detalhadamente o que deve aparecer na imagem: enquadramento, express√£o, objetos, fundo, luz, posi√ß√£o de texto.\n\nComo se fosse um briefing de design para um editor.\n\nTexto da imagem ‚Äì curto e direto (m√°x. 5 palavras).\n\nEmo√ß√£o dominante ‚Äì qual sentimento o rosto ou cena deve expressar.\n\nCores e contraste ‚Äì tons principais e como eles devem se combinar.\n\nJustificativa visual ‚Äì por que a thumbnail chama aten√ß√£o (gatilho visual, contraste emocional, clareza da promessa, etc).\n\nüé® DIRETRIZES DE DESIGN\n\nFoco em rostos humanos e emo√ß√£o vis√≠vel.\n\nTexto grande, leg√≠vel e direto (‚â§5 palavras).\n\nContraste: fundo escuro + texto claro, ou o inverso.\n\nM√°x. 3 elementos principais (rosto + texto + objeto).\n\nCores preferidas: amarelo, vermelho, branco, preto, azul.\n\nA thumb deve funcionar mesmo em 10% do tamanho original.\n\nDeve sempre representar o conflito (problema) e a solu√ß√£o (resultado).\n\nProibido fazer thumbs gen√©ricas ou neutras ‚Äî cada conceito precisa ser visualmente distinto.\n\nüßæ OUTPUT FORMAT\n\nRetorne apenas JSON parse√°vel no formato abaixo:\n\n{\n  \"thumbnails\": [\n    {\n      \"conceito\": 1,\n      \"descricao_visual\": \"string (descri√ß√£o detalhada de toda a composi√ß√£o, incluindo personagens, express√µes, fundo, ilumina√ß√£o, posi√ß√£o do texto, e elementos visuais-chave)\",\n      \"texto_na_imagem\": \"string (at√© 5 palavras, leg√≠vel e com contraste)\",\n      \"emocao_personagem\": \"string (ex: surpresa, al√≠vio, espanto, confian√ßa)\",\n      \"cores_dominantes\": [\"string\"],\n      \"indicacoes_fotografia\": [\"plano m√©dio\", \"close-up\", \"luz lateral\", \"sombra fria\", \"desfoque de fundo\"],\n      \"por_que_funciona\": \"string (explique o gatilho visual e o motivo de chamar aten√ß√£o instantaneamente)\"\n    }\n  ]\n}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2448,
        -80
      ],
      "id": "d2a22768-72ff-4278-b125-d754757f23f2",
      "name": "AI Agent4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2520,
        144
      ],
      "id": "94fd0e98-1696-4ff1-95c3-c7f8498b4c78",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "KLswP7RvatbPMtON",
          "name": "Renato"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 961617875,
          "mode": "list",
          "cachedResultName": "Conte√∫do",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=961617875"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Data": "18/10/2025",
            "Thumb": "=Conceito: {{ $json.Thumb1_Conceito }}\nDescri√ß√£o: {{ $json.Thumb1_Descricao }}\nTexto: {{ $json.Thumb1_Texto }}\nCores: {{ $json.Thumb1_Cores }}\nFotografia: {{ $json.Thumb1_Fotografia }}\n\nExplica√ß√£o: {{ $json.Thumb1_Porque }}\n\nConceito: {{ $json.Thumb2_Conceito }}\nDescri√ß√£o: {{ $json.Thumb2_Descricao }}\nTexto:{{ $json.Thumb2_Texto }}\nCores: {{ $json.Thumb2_Cores }}\nFotografia: {{ $json.Thumb2_Fotografia }}\n\nExplica√ß√£o: {{ $json.Thumb2_Porque }}\n\n\nConceito: {{ $json.Thumb3_Conceito }}\nDescri√ß√£o: {{ $json.Thumb3_Descricao }}\nTexto: {{ $json.Thumb3_Texto }}\nCores: {{ $json.Thumb3_Cores }}\nFotografia: {{ $json.Thumb3_Fotografia }}\n\nExplica√ß√£o: {{ $json.Thumb3_Porque }}",
            "Roteiro": "={{ $('AI Agent3').item.json.output }}",
            "Pontua√ß√£o": "=Score {{ $json.Score }}\n\nJustificativa: {{ $json.Justificativa }}\n\nConcorrencia: {{ $json.Concorrencia }}\n\nVideo Existentes: {{ $json.Videos_Existentes }}\n\nOutlierScoreMedio:{{ $json.Outlier_Score_Medio }}\nBenchMark P75:{{ $json.Benchmark_P75 }}\nBenchMark P90:{{ $json.Benchmark_P90 }}\n\nCalculo Base: \n\nCalculo Similaridade:{{ $json.Calculo_Similaridade }}\nCalculo Concorrencia:{{ $json.Calculo_Concorrencia }}\nCalculo Gatilho: {{ $json.Calculo_Gatilho }}\nCalculo N√∫mero:{{ $json.Calculo_Numero }}\n\nMotivo Score: {{ $json.Motivo_Score }}\n",
            "Titulo": "={{ $json.Titulo }}",
            "Nicho": "={{ $('Loop Over Items').item.json.tema }}",
            "Justificativa": "={{ $('Loop Over Items').item.json.oportunidade }}",
            "Palavras_Chave": "={{ $json.Palavras_Chave }}",
            "Ideia": "={{ $('Loop Over Items').item.json.ideia_central }}",
            "Estrutura Explicada": "=Gatilho Usado:  {{ $json.Gatilho_Usado }}\nN√∫mero Usado: {{ $json.Numero_Usado }}\nEstrutura aplicada: {{ $json.Estrutura_Aplicada }}\n\nOrigem: {{ $json.Origem }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Nicho",
              "displayName": "Nicho",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Data",
              "displayName": "Data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Ideia",
              "displayName": "Ideia",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Justificativa",
              "displayName": "Justificativa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Palavras_Chave",
              "displayName": "Palavras_Chave",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Titulo",
              "displayName": "Titulo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Estrutura Explicada",
              "displayName": "Estrutura Explicada",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Pontua√ß√£o",
              "displayName": "Pontua√ß√£o",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Thumb",
              "displayName": "Thumb",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Roteiro",
              "displayName": "Roteiro",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        3248,
        44
      ],
      "id": "025bd708-a1c5-4ea4-aabf-87ef42976966",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =============================================\n// LIMPAR/UNIFICAR JSON - SEM ROTEIRO (robusto)\n// =============================================\n\nconst items = $input.all();\n\n// ----------------- helpers -------------------\nfunction stripCodeFences(s) {\n  if (typeof s !== \"string\") return s;\n  let t = s.trim();\n  if (!t.includes(\"```\")) return t;\n  const first = t.indexOf(\"```\");\n  const last  = t.lastIndexOf(\"```\");\n  if (last > first) {\n    t = t.slice(first + 3, last);\n    t = t.replace(/^[a-zA-Z0-9_-]+\\n/, \"\"); // remove \"json\\n\", \"js\\n\" etc.\n  } else {\n    t = t.replace(/```/g, \"\").replace(/^[a-zA-Z0-9_-]+\\n/, \"\");\n  }\n  return t.trim();\n}\n\nfunction tryParseJSON(raw) {\n  if (raw && typeof raw === \"object\") return raw;\n  if (raw == null) return null;\n  const s = stripCodeFences(String(raw));\n\n  try { return JSON.parse(s); } catch (_) {}\n\n  // tenta achar o maior bloco {‚Ä¶} ou [‚Ä¶]\n  const m = s.match(/(\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])/g);\n  if (m && m.length) {\n    let best = m[0];\n    for (const c of m) if (c.length > best.length) best = c;\n    try { return JSON.parse(best); } catch (_) {}\n  }\n  return s; // devolve string crua para n√£o travar\n}\n\nfunction pick(obj, keys, def = \"\") {\n  for (const k of keys) {\n    if (obj && Object.prototype.hasOwnProperty.call(obj, k) && obj[k] != null) {\n      return obj[k];\n    }\n  }\n  return def;\n}\nfunction arr(x){ return Array.isArray(x) ? x : (x==null ? [] : [x]); }\nfunction joinArr(a){ return Array.isArray(a) ? a.filter(Boolean).join(\", \") : (a || \"\"); }\n\n// --------------- pipeline --------------------\nconst dadosLimpos = items.map(item => {\n  const data = item.json || {};\n\n  // ================== T√çTULO ==================\n  let ranking_titulo = '';\n  let titulo = '';\n  let gatilho_usado = '';\n  let numero_usado = '';\n  let estrutura_aplicada = '';\n  let origem = '';\n  let palavras_chave = ''; // pode vir do avaliador, mas se vier aqui j√° aproveitamos\n\n  const tituloData = tryParseJSON(pick(data, [\"Titulo\",\"T√≠tulo\",\"title\",\"output\",\"content\",\"data\"], null));\n\n  if (tituloData && typeof tituloData === \"object\") {\n    // formatos aceitos:\n    // { titulos_otimizados: [ {titulo, ranking, ...} ] }\n    // ou { titulo: \"...\", ... }\n    const arrTit = Array.isArray(tituloData.titulos_otimizados)\n      ? tituloData.titulos_otimizados\n      : (tituloData.titulo ? [tituloData] : []);\n\n    if (arrTit.length) {\n      const opt = arrTit[0];\n      ranking_titulo      = pick(opt, [\"ranking\"], '');\n      titulo              = pick(opt, [\"titulo\",\"title\",\"T√≠tulo\",\"Titulo\"], '');\n      gatilho_usado       = pick(opt, [\"gatilho_usado\",\"gatilho\",\"gatilho_utilizado\"], '');\n      numero_usado        = pick(opt, [\"numero_usado\",\"numero\",\"n√∫mero_usado\"], '');\n      estrutura_aplicada  = pick(opt, [\"estrutura_aplicada\",\"estrutura\",\"estrutura_detectada\"], '');\n      origem              = pick(opt, [\"origem\",\"ideia_central\",\"ideia\",\"tema\"], '');\n      palavras_chave      = joinArr(pick(opt, [\"palavras_chave\",\"keywords\",\"tags\"], []));\n    } else {\n      // talvez seja um array de strings/objetos simples\n      const guessTitle = pick(tituloData, [\"titulo\",\"title\",\"T√≠tulo\",\"Titulo\"], \"\");\n      titulo = guessTitle || (Array.isArray(tituloData) ? pick(tituloData[0]||{}, [\"titulo\",\"title\"], String(tituloData[0]||\"\")) : \"\");\n    }\n  } else if (typeof tituloData === \"string\") {\n    titulo = tituloData;\n  }\n\n  // ============== AVALIA√á√ÉO / SCORE ===========\n  let ranking_avaliacao = '';\n  let titulo_avaliacao = '';\n  let score = '';\n  let justificativa = '';\n  let concorrencia = '';\n  let videos_existentes = '';\n  let outlier_score_medio = '';\n  let benchmark_p75 = '';\n  let benchmark_p90 = '';\n  let calculo_base = '';\n  let calculo_similaridade = '';\n  let calculo_concorrencia = '';\n  let calculo_gatilho = '';\n  let calculo_numero = '';\n  let calculo_idade = '';\n  let calculo_negativo = '';\n  let motivo_score = '';\n\n  const pontuacaoRaw = pick(data, [\"Pontua√ß√£o\",\"Pontuacao\",\"Justificativa\",\"Avaliacao\",\"Avalia√ß√£o\",\"Score\",\"output\",\"content\",\"data\"], null);\n  const pontuacaoData = tryParseJSON(pontuacaoRaw);\n\n  if (pontuacaoData && typeof pontuacaoData === \"object\") {\n    // formatos aceitos:\n    // { avaliacao_ideias: [ {...} ] }\n    // { avaliacao: {...} } | { resultado: {...} } | { score, justificativa, ... }\n    const arrAval = Array.isArray(pontuacaoData.avaliacao_ideias)\n      ? pontuacaoData.avaliacao_ideias\n      : (pontuacaoData.avaliacao ? [pontuacaoData.avaliacao] :\n         pontuacaoData.resultado ? [pontuacaoData.resultado] :\n         (typeof pontuacaoData.score !== \"undefined\" || pontuacaoData.justificativa) ? [pontuacaoData] : []);\n\n    if (arrAval.length) {\n      const a = arrAval[0];\n      ranking_avaliacao = pick(a, [\"ranking\"], '');\n      titulo_avaliacao  = pick(a, [\"titulo\",\"title\",\"T√≠tulo\",\"Titulo\"], '');\n      score             = String(pick(a, [\"score\",\"pontuacao\",\"pontua√ß√£o\"], ''));\n      justificativa     = pick(a, [\"justificativa\",\"motivo\",\"racional\"], '');\n      concorrencia      = pick(a, [\"concorrencia\",\"concorr√™ncia\"], '');\n      if (!palavras_chave) palavras_chave = joinArr(pick(a, [\"palavras_chave\",\"keywords\",\"tags\"], []));\n\n      const bd = pick(a, [\"breakdown\",\"detalhamento\"], {});\n      if (bd && typeof bd === \"object\") {\n        videos_existentes     = pick(bd, [\"videosExistentes\"], '');\n        outlier_score_medio   = pick(bd, [\"outlierScoreMedio\"], '');\n        const bm = pick(bd, [\"benchmarks\"], {});\n        if (bm) {\n          benchmark_p75 = pick(bm, [\"p75\"], '');\n          benchmark_p90 = pick(bm, [\"p90\"], '');\n        }\n        const calc = pick(bd, [\"calculos\",\"c√°lculos\"], {});\n        if (calc) {\n          calculo_base          = pick(calc, [\"base\"], '');\n          calculo_similaridade  = pick(calc, [\"similaridade\"], '');\n          calculo_concorrencia  = pick(calc, [\"concorrencia\",\"concorr√™ncia\"], '');\n          calculo_gatilho       = pick(calc, [\"gatilho\"], '');\n          calculo_numero        = pick(calc, [\"numero\",\"n√∫mero\"], '');\n          calculo_idade         = pick(calc, [\"idade\"], '');\n          calculo_negativo      = pick(calc, [\"negativo\"], '');\n        }\n        motivo_score = pick(bd, [\"motivoScore\",\"motivo\"], '');\n      }\n    }\n  }\n\n  // ================== THUMBS ===================\n  let thumb1_conceito = '', thumb1_descricao = '', thumb1_texto = '', thumb1_emocao = '', thumb1_cores = '', thumb1_fotografia = '', thumb1_porque = '';\n  let thumb2_conceito = '', thumb2_descricao = '', thumb2_texto = '', thumb2_emocao = '', thumb2_cores = '', thumb2_fotografia = '', thumb2_porque = '';\n  let thumb3_conceito = '', thumb3_descricao = '', thumb3_texto = '', thumb3_emocao = '', thumb3_cores = '', thumb3_fotografia = '', thumb3_porque = '';\n\n  const thumbData = tryParseJSON(pick(data, [\"Thumb\",\"Thumbnails\",\"conceitos\",\"thumbs\",\"output\",\"content\",\"data\"], null));\n\n  function mapThumb(t, setIdx){\n    if (!t) return;\n    const conceito   = pick(t, [\"conceito\",\"titulo\",\"headline\",\"texto_thumb\",\"texto\"], '');\n    const descricao  = pick(t, [\"descricao_visual\",\"descri√ß√£o_visual\",\"descricao\",\"description\"], '');\n    const texto      = pick(t, [\"texto_na_imagem\",\"texto_thumb\",\"texto\",\"headline\"], '');\n    const emocao     = pick(t, [\"emocao_personagem\",\"emo√ß√£o_personagem\",\"emocao\",\"emo√ß√£o\",\"emotion\"], '');\n    const cores      = joinArr(pick(t, [\"cores_dominantes\",\"cores\",\"palette\"], []));\n    const foto       = joinArr(pick(t, [\"indicacoes_fotografia\",\"indica√ß√µes_fotografia\",\"fotografia\",\"photo\"], []));\n    const porque     = pick(t, [\"por_que_funciona\",\"porque_funciona\",\"reason\"], '');\n\n    if (setIdx === 1){ thumb1_conceito = conceito; thumb1_descricao = descricao; thumb1_texto = texto; thumb1_emocao = emocao; thumb1_cores = cores; thumb1_fotografia = foto; thumb1_porque = porque; }\n    if (setIdx === 2){ thumb2_conceito = conceito; thumb2_descricao = descricao; thumb2_texto = texto; thumb2_emocao = emocao; thumb2_cores = cores; thumb2_fotografia = foto; thumb2_porque = porque; }\n    if (setIdx === 3){ thumb3_conceito = conceito; thumb3_descricao = descricao; thumb3_texto = texto; thumb3_emocao = emocao; thumb3_cores = cores; thumb3_fotografia = foto; thumb3_porque = porque; }\n  }\n\n  if (thumbData && typeof thumbData === \"object\") {\n    // formatos aceitos:\n    // { thumbnails: [ {...},{...},{...} ] } | { conceitos: [ ... ] } | { thumbs: [ ... ] }\n    const list = Array.isArray(thumbData.thumbnails) ? thumbData.thumbnails\n               : Array.isArray(thumbData.conceitos)  ? thumbData.conceitos\n               : Array.isArray(thumbData.thumbs)     ? thumbData.thumbs\n               : [];\n\n    mapThumb(list[0], 1);\n    mapThumb(list[1], 2);\n    mapThumb(list[2], 3);\n  }\n\n  // ================ METADATA ===================\n  const Nicho = pick(data, [\"Nicho\",\"nicho\"], '');\n  const Data  = pick(data, [\"Data\",\"data\"], '');\n\n  // --------------- retorno ---------------------\n  return {\n    // T√çTULO\n    Ranking_Titulo: ranking_titulo,\n    Titulo: titulo,\n    Gatilho_Usado: gatilho_usado,\n    Numero_Usado: numero_usado,\n    Estrutura_Aplicada: estrutura_aplicada,\n    Origem: origem,\n\n    // AVALIA√á√ÉO/PONTUA√á√ÉO\n    Ranking_Avaliacao: ranking_avaliacao,\n    Titulo_Avaliacao: titulo_avaliacao,\n    Score: score,\n    Justificativa: justificativa,\n    Palavras_Chave: palavras_chave,\n    Concorrencia: concorrencia,\n\n    // BREAKDOWN\n    Videos_Existentes: videos_existentes,\n    Outlier_Score_Medio: outlier_score_medio,\n    Benchmark_P75: benchmark_p75,\n    Benchmark_P90: benchmark_p90,\n    Calculo_Base: calculo_base,\n    Calculo_Similaridade: calculo_similaridade,\n    Calculo_Concorrencia: calculo_concorrencia,\n    Calculo_Gatilho: calculo_gatilho,\n    Calculo_Numero: calculo_numero,\n    Calculo_Idade: calculo_idade,\n    Calculo_Negativo: calculo_negativo,\n    Motivo_Score: motivo_score,\n\n    // THUMB 1\n    Thumb1_Conceito: thumb1_conceito,\n    Thumb1_Descricao: thumb1_descricao,\n    Thumb1_Texto: thumb1_texto,\n    Thumb1_Emocao: thumb1_emocao,\n    Thumb1_Cores: thumb1_cores,\n    Thumb1_Fotografia: thumb1_fotografia,\n    Thumb1_Porque: thumb1_porque,\n\n    // THUMB 2\n    Thumb2_Conceito: thumb2_conceito,\n    Thumb2_Descricao: thumb2_descricao,\n    Thumb2_Texto: thumb2_texto,\n    Thumb2_Emocao: thumb2_emocao,\n    Thumb2_Cores: thumb2_cores,\n    Thumb2_Fotografia: thumb2_fotografia,\n    Thumb2_Porque: thumb2_porque,\n\n    // THUMB 3\n    Thumb3_Conceito: thumb3_conceito,\n    Thumb3_Descricao: thumb3_descricao,\n    Thumb3_Texto: thumb3_texto,\n    Thumb3_Emocao: thumb3_emocao,\n    Thumb3_Cores: thumb3_cores,\n    Thumb3_Fotografia: thumb3_fotografia,\n    Thumb3_Porque: thumb3_porque,\n\n    // METADATA\n    Nicho,\n    Data\n  };\n});\n\n// Logs √∫teis de debug (mant√©m curto)\nconsole.log(`‚úÖ ${dadosLimpos.length} registros processados`);\nif (dadosLimpos[0]) {\n  console.log('üìù Sample ‚Äî Titulo:', dadosLimpos[0].Titulo);\n  console.log('üìù Sample ‚Äî Score:', dadosLimpos[0].Score);\n  console.log('üìù Sample ‚Äî Thumb1_Texto:', dadosLimpos[0].Thumb1_Texto);\n}\n\nreturn dadosLimpos.map(d => ({ json: d }));\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3024,
        -80
      ],
      "id": "9084bcd7-5f7e-4edc-b872-fbf36d3093b4",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fc6fdc37-4d9d-498d-9516-0de11fd1aea6",
              "name": "Titulo",
              "value": "={{ $('AI Agent1').item.json.output }}",
              "type": "string"
            },
            {
              "id": "e3f80aab-98e7-4e0b-9031-359829c0ef63",
              "name": "Pontua√ß√£o",
              "value": "={{ $('AI Agent2').item.json.output }}",
              "type": "string"
            },
            {
              "id": "a918e118-81b2-46c2-af3b-d2319d8bad59",
              "name": "",
              "value": "={{ $('Code in JavaScript').item.json.oportunidade }}",
              "type": "string"
            },
            {
              "id": "8d63d1ac-bca5-4c58-94e0-fa878296caad",
              "name": "Thumb",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2800,
        -80
      ],
      "id": "3517ad8c-cffc-4064-aeae-e8a62271b4a0",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ",
          "mode": "list",
          "cachedResultName": "Teste Dev IA Pleno",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 961617875,
          "mode": "list",
          "cachedResultName": "Conte√∫do",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XlZTABwHA456bYCFRiS8BFLxynypmo65pXeBeRV1WkQ/edit#gid=961617875"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -80,
        44
      ],
      "id": "9ba2e03a-1f74-4897-a05c-3fc2c442dccd",
      "name": "Get row(s) in sheet1",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "KrBqg4twP2wKcI6z",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Nicho"
            },
            {
              "fieldToAggregate": "Ideia"
            },
            {
              "fieldToAggregate": "Titulo"
            },
            {
              "fieldToAggregate": "Estrutura Explicada"
            },
            {
              "fieldToAggregate": "Pontua√ß√£o"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        144,
        44
      ],
      "id": "4b3c3ebb-4cbe-4d19-a2c4-2dc4b80c7d98",
      "name": "Aggregate"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‚ÄòExecute workflow‚Äô": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "AI Agent4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9fcb28ab-1263-4b3c-b2db-5a0c5e4ef9c2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c5d6c53e60bd1d3aa2e715f321339a9825e6c2e5b18beaf3f0749145af2adffd"
  },
  "id": "NCZXlFUbBV9UJf1Q",
  "tags": []
}